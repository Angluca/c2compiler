/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;

public type AliasType struct @(opaque) {
    Type base;
    AliasTypeDecl* decl;
}

fn AliasType* AliasType.create(ast_context.Context* c, AliasTypeDecl* decl) {
    AliasType* t = c.alloc(sizeof(AliasType));
    t.base.init(TypeKind.Alias);
    t.decl = decl;
#if AstStatistics
    Stats.addType(TypeKind.Alias, sizeof(AliasType));
#endif
    return t;
}

public fn AliasTypeDecl* AliasType.getDecl(const AliasType* t) { return t.decl; }

fn void AliasType.print(const AliasType* t, string_buffer.Buf* out) {
    out.add("(alias)");
    out.add(t.decl.base.getModuleName());
    out.add1('.');
    out.add(t.decl.base.getName());
}

fn void AliasType.fullPrint(const AliasType* t, string_buffer.Buf* out, u32 indent) {
    out.indent(indent);
    out.print("AliasType [%p] %s\n", t, t.decl.asDecl().getName());
}

