/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;

type BooleanLiteralBits struct {
    u32 : NumExprBits;
    u32 value : 1;
}

public type BooleanLiteral struct @(opaque) {
    Expr base;
}

public fn BooleanLiteral* BooleanLiteral.create(ast_context.Context* c, SrcLoc loc, bool val) {
    BooleanLiteral* e = c.alloc(sizeof(BooleanLiteral));
    e.base.init(ExprKind.BooleanLiteral, loc, 1, 1, 0, ValType.RValue);
    e.base.base.booleanLiteralBits.value = val;
    e.base.setType(ast.builtins[BuiltinKind.Bool]);
#if AstStatistics
    Stats.addExpr(ExprKind.BooleanLiteral, sizeof(BooleanLiteral));
#endif
    return e;
}

fn Value BooleanLiteral.getValue(const BooleanLiteral* e) {
    return Value.createUnsigned(e.base.base.booleanLiteralBits.value);
}

fn SrcLoc BooleanLiteral.getEndLoc(const BooleanLiteral* e) {
    return e.base.base.loc + (e.base.base.booleanLiteralBits.value ? 4 : 5);
}

fn void BooleanLiteral.print(const BooleanLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.space();
    out.color(col_Value);
    out.add(e.base.base.booleanLiteralBits.value ? "true" : "false");
    out.newline();
}

public fn void BooleanLiteral.printLiteral(const BooleanLiteral* e, string_buffer.Buf* out) {
    out.add(e.base.base.booleanLiteralBits.value ? "true" : "false");
}

