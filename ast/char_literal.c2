/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ast;

import ast_context;
import string_buffer;
import src_loc local;
import number_radix local;

type CharLiteralBits struct {
    u32 : NumExprBits;
    u32 value : 8;
    u32 radix : 2;      // number_radix.Radix enum
    u32 src_len : 32 - NumExprBits - 8 - 2;
}

public type CharLiteral struct @(opaque) {
    Expr base;
}

public fn CharLiteral* CharLiteral.create(ast_context.Context* c, SrcLoc loc, u32 src_len, u8 val, Radix radix) {
    CharLiteral* e = c.alloc(sizeof(CharLiteral));
    e.base.init(ExprKind.CharLiteral, loc, 1, 1, 0, ValType.RValue);
    e.base.base.charLiteralBits.value = val;
    e.base.base.charLiteralBits.radix = radix;
    e.base.base.charLiteralBits.src_len = src_len;
#if AstStatistics
    Stats.addExpr(ExprKind.CharLiteral, sizeof(CharLiteral));
#endif
    e.base.setType(builtins[BuiltinKind.Char]);
    return e;
}

fn Value CharLiteral.getValue(const CharLiteral* e) {
    return Value.createUnsigned(e.base.base.charLiteralBits.value);
}

fn SrcLoc CharLiteral.getEndLoc(const CharLiteral* e) {
    return e.base.base.loc + e.base.base.charLiteralBits.src_len;
}

fn void CharLiteral.print(const CharLiteral* e, string_buffer.Buf* out, u32 indent) {
    e.base.printKind(out, indent);
    e.base.printTypeBits(out);
    out.space();
    out.color(col_Value);
    e.printLiteral(out);
    out.newline();
}

public fn void CharLiteral.printLiteral(const CharLiteral* e, string_buffer.Buf* out) {
    u8 c = (u8)e.base.base.charLiteralBits.value;

    switch (e.base.base.charLiteralBits.radix) {
    case Radix.Octal:
        out.print("'\\%o'", c);
        return;
    case Radix.Hex:
        out.print("'\\x%02x'", c);
        return;
    default:
        out.add1('\'');
        char cc = c;
        out.encodeBytes(&cc, 1, '\'');
        out.add1('\'');
        return;
    }
}

