/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module string_pool;

import string;
import stdlib;
import stdio;

const u32 HASH_TABLE_SIZE = 256;

type HashEntry struct {
    u32 num_entries;
    u32[64] entries;
}

public type Pool struct @(opaque) {
    u32 data_size;      // number of bytes used
    u32 data_capacity;
    char* data;

    // statistics
    u32 num_adds;
    u32 total_size;     // total size that would have been allocated without filtering

    // Hashtable
    HashEntry[HASH_TABLE_SIZE] hash_table;
}
static_assert(66584, sizeof(Pool));

public fn Pool* create(u32 data_capacity) {
    Pool* p = stdlib.calloc(1, sizeof(Pool));
    p.resize_data(data_capacity);
    p.data[0] = 0;
    p.data_size = 1; // skip 1 (used to store empty strings)
    return p;
}

public fn void Pool.free(Pool* p) {
    stdlib.free(p.data);
    stdlib.free(p);
}

const u32 HASH_INITIAL = 13;
const u32 HASH_PRIME = 17;

fn u32 hash(const char* text, usize len) {
    // FNV-1a hash
    u32 result = HASH_INITIAL;
    for (u32 i=0; i<len; i++) {
        result = result ^ text[i];
        result *= HASH_PRIME;
    }
    return result % HASH_TABLE_SIZE;
}

public fn const char* Pool.getStart(const Pool* pool) { return pool.data; }

public fn const char* Pool.idx2str(const Pool* pool, u32 idx) {
    return pool.data + idx;
}

// NOTE: right is NOT 0-terminated!
// 0 left
// 1 right
// 2 equal
fn u32 compare(const char* left, const char* right, usize rlen) {
    u32 i = 0;
    while (i < rlen) {
        char l = left[i];
        char r = right[i];
        i32 c = l - r;
        if (c < 0) return 1;
        if (c > 0) return 0;
        i++;
    }
    if (left[rlen] == 0) return 2;
    return 0;
}


// NOTE: text is not 0-terminated!! len is strlen(text)
public fn u32 Pool.add(Pool* pool, const char* text, usize len, bool filter) {
    pool.num_adds++;
    pool.total_size += len;

    if (filter) {
        u32 hashcode = hash(text, len);
        HashEntry* he = &pool.hash_table[hashcode];
        for (u32 i=0; i<he.num_entries; i++) {
            const char* word = pool.data + he.entries[i];
            if (compare(word, text, len) == 2) {
                return he.entries[i];
            }
        }
        he.entries[he.num_entries] = pool.data_size;
        assert(he.num_entries < elemsof(he.entries));
        he.num_entries++;
    }

    while (pool.data_size + len + 1 > pool.data_capacity) {
        if (text >= pool.data && text < pool.data + pool.data_size) {
            /* adding a fragment from an existing word in the array */
            // NOTE: users should NOT keep pointers to data, because reallocating will move the array
            isize offset = text - pool.data;
            pool.resize_data(pool.data_capacity * 2);
            text = pool.data + offset;
        } else {
            pool.resize_data(pool.data_capacity * 2);
        }
    }
    u32 idx = pool.data_size;
    char* dest = pool.data + pool.data_size;
    string.memcpy(dest, text, len);
    dest[len] = 0;
    pool.data_size += len + 1;
    //assert(pool.data_size <= pool.data_capacity);
    return idx;
}

public fn u32 Pool.addStr(Pool* pool, const char* text, bool filter) {
    return pool.add(text, string.strlen(text), filter);
}

fn void Pool.resize_data(Pool* p, u32 capacity) {
    p.data_capacity = capacity;
    char* data2 = stdlib.malloc(capacity);
    if (p.data_size) {
        string.memcpy(data2, p.data, p.data_size);
        stdlib.free(p.data);
    }
    p.data = data2;
}

public fn void Pool.report(const Pool* pool) {
    u32 max = 0;
    u32 min = 999;
    u32 count = 0;
    for (u32 i=0; i<HASH_TABLE_SIZE; i++) {
        u32 num = pool.hash_table[i].num_entries;
        count += num;
        if (num) {
            if (num > max) max = num;
            if (num < min) min = num;
            //stdio.printf("[%4d] %d\n", i, num);
        }
    }
    stdio.printf("pool: %d(%d) adds, data %d(%d)/%d bytes\n",
        count, pool.num_adds,
        pool.data_size, pool.total_size, pool.data_capacity);

    stdio.printf("  hash: %d entries, min %d max %d\n", HASH_TABLE_SIZE, min, max);
#if 0
    const char* end = pool.data + pool.data_size;
    const char* cp = pool.data;
    u32 idx = 0;
    while (cp < end) {
        stdio.printf("  [%5u] %s\n", idx, cp);
        idx++;
        while (*cp != 0) cp++;
        cp++;
    }
#endif
}

