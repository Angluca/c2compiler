128c128
< extern int* __errno_location(void);
---
> extern int* __error(void);
132c132
< #define c_errno_ENAMETOOLONG 36
---
> #define c_errno_ENAMETOOLONG 63
175c175
<    c_longlong d_off;
---
>    c_ulonglong d_seekoff;
176a177
>    c_ushort d_namlen;
178c179
<    char d_name[256];
---
>    char d_name[1024];
193,194c194,197
< #define libc_fcntl_O_CREAT 0100
< #define libc_fcntl_O_TRUNC 01000
---
> #define libc_fcntl_O_NONBLOCK 04
> #define libc_fcntl_O_CREAT 01000
> #define libc_fcntl_O_TRUNC 02000
> #define libc_fcntl_O_CLOEXEC 0100000000
216,217c219,220
< extern FILE* stdout;
< extern FILE* stderr;
---
> extern FILE* __stdoutp;
> extern FILE* __stderrp;
294a298,302
> struct timespec {
>    c_long tv_sec;
>    c_long tv_nsec;
> };
> 
296c304,306
<    c_ulong st_dev;
---
>    c_int st_dev;
>    c_ushort st_mode;
>    c_ushort st_nlink;
298,299d307
<    c_ulong st_nlink;
<    c_uint st_mode;
302,312c310,321
<    c_ulong st_rdev;
<    c_long st_size;
<    c_long st_blksize;
<    c_long st_blocks;
<    c_long st_atime;
<    c_long st_atime_nsec;
<    c_long st_mtime;
<    c_long st_mtime_nsec;
<    c_long st_ctime;
<    c_long st_ctime_nsec;
<    c_long reserved[3];
---
>    c_uint st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    c_ulong st_size;
>    c_ulong st_blocks;
>    c_uint st_blksize;
>    c_uint st_flags;
>    c_uint st_gen;
>    c_int st_lspare;
>    c_long st_qspare[2];
330c339
< typedef int64_t suseconds_t;
---
> typedef int32_t suseconds_t;
348c357
< #define sys_utsname_NAME_LEN 65
---
> #define sys_utsname_NAME_LEN 256
350,355c359,364
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
383c392
< #define dlfcn_RTLD_DEFAULT ((void*)((size_t)(0)))
---
> #define dlfcn_RTLD_DEFAULT ((void*)((size_t)(-2)))
2281c2290
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
2283c2292
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
2296c2305
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
2298c2307
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
2311c2320
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf(__stderrp, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
2313c2322
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf(__stderrp, "%s: error: %s\n", loc, buf);
2374c2383
<          if (((*__errno_location()) != c_errno_EINTR)) return -1;
---
>          if (((*__error()) != c_errno_EINTR)) return -1;
2388c2397
<       file->error = (*__errno_location());
---
>       file->error = (*__error());
2393c2402
<       file->error = (*__errno_location());
---
>       file->error = (*__error());
2411c2420
<       file->error = (*__errno_location());
---
>       file->error = (*__error());
2489c2498
<          if (((*__errno_location()) != c_errno_EINTR)) return -1;
---
>          if (((*__error()) != c_errno_EINTR)) return -1;
2501c2510
<       writer->error = (*__errno_location());
---
>       writer->error = (*__error());
2506c2515
<       writer->error = (*__errno_location());
---
>       writer->error = (*__error());
2544c2553
<          if ((mkdir(tmp, 0777) && ((*__errno_location()) != c_errno_EEXIST))) return (*__errno_location());
---
>          if ((mkdir(tmp, 0777) && ((*__error()) != c_errno_EEXIST))) return (*__error());
2762,2763c2771,2772
<       fprintf(stderr, "[exec] %s\n", msg);
<       fflush(stderr);
---
>       fprintf(__stderrp, "[exec] %s\n", msg);
>       fflush(__stderrp);
2773c2782
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2777c2786
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__error())));
2784c2793
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror((*__error())));
2796c2805
<          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno_location())));
---
>          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__error())));
2799c2808
<          if (((*__errno_location()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__error())));
2806c2815
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__error())));
2823c2832
<       fflush(stdout);
---
>       fflush(__stdoutp);
2825,2826c2834,2835
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__error());
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2835c2844
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2847c2856
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror((*__error())));
2904c2913
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2908c2917
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__error())));
2915c2924
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror((*__error())));
2922c2931
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror((*__error())));
2933c2942
<          if (((*__errno_location()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__error())));
2937c2946
<          if (((*__errno_location()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__error()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__error())));
2941c2950
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__error())));
2957,2958c2966,2967
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__error());
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2968c2977
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2983c2992
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror((*__error())));
2997c3006
<             fprintf(stderr, "error reading process output\n");
---
>             fprintf(__stderrp, "error reading process output\n");
3010c3019
<          fprintf(stderr, "child exited ABNORMALLY\n");
---
>          fprintf(__stderrp, "child exited ABNORMALLY\n");
3240c3249
<          fprintf(stderr, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf(__stderrp, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3242c3251
<          fprintf(stderr, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf(__stderrp, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3296c3305
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3342c3351
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3789c3798
<          if (((*__errno_location()) != c_errno_ENOENT)) {
---
>          if (((*__error()) != c_errno_ENOENT)) {
3983c3992
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
4030c4039
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
4048c4057
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
4398c4407
<       console_error("error getting system info: %s", strerror((*__errno_location())));
---
>       console_error("error getting system info: %s", strerror((*__error())));
5757c5766
< static const char git_version_Describe[9] = "c49d6103";
---
> static const char git_version_Describe[15] = "c49d6103-dirty";
17988c17997
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), __stdoutp);
19376c19385
<    fputs(string_buffer_Buf_data(out), stderr);
---
>    fputs(string_buffer_Buf_data(out), __stderrp);
19407c19416
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
21254c21263
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
21256c21265
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
37480c37489
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
37505c37514
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
37511c37520
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
37578c37587
< static const char* plugin_mgr_lib_ext = ".so";
---
> static const char* plugin_mgr_lib_ext = ".dylib";
37662c37671
<          console_warn("cannot read '%s': %s", path, strerror((*__errno_location())));
---
>          console_warn("cannot read '%s': %s", path, strerror((*__error())));
41537c41546
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), __stdoutp);
45906c45915
<       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno_location())));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror((*__error())));
46297c46306
<          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno_location())));
---
>          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__error())));
