124c124
< int32_t* __errno_location(void);
---
> int32_t* __error(void);
167c167
<    int64_t d_off;
---
>    uint64_t d_seekoff;
168a169
>    uint16_t d_namlen;
170c171
<    char d_name[256];
---
>    char d_name[1024];
177c178
< dirent* readdir(DIR* dirp);
---
> dirent* readdir$INODE64(DIR* dirp);
184,190c185,191
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
< #define AT_FDCWD -100
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0400000
> #define O_DIRECTORY 04000000
> #define AT_FDCWD -2
221c222
< extern FILE* stdout;
---
> extern FILE* __stdoutp;
223c224
< extern FILE* stderr;
---
> extern FILE* __stderrp;
300a302,306
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
302c308,310
<    uint64_t st_dev;
---
>    int32_t st_dev;
>    uint16_t st_mode;
>    uint16_t st_nlink;
304,305d311
<    uint64_t st_nlink;
<    uint32_t st_mode;
308,318c314,325
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
<    int64_t st_blocks;
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    uint32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    uint64_t st_size;
>    uint64_t st_blocks;
>    uint32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    int32_t st_lspare;
>    int64_t st_qspare[2];
325,326c332,333
< int32_t fstat(int32_t fd, struct stat* buf);
< int32_t stat(const char* pathname, struct stat* buf);
---
> int32_t fstat64(int32_t fd, struct stat* buf);
> int32_t stat64(const char* pathname, struct stat* buf);
336c343
< typedef int64_t suseconds_t;
---
> typedef int32_t suseconds_t;
354c361
< #define NAME_LEN 65
---
> #define NAME_LEN 256
356,361c363,368
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
400c407
< static const char git_version_Describe[9] = "90760608";
---
> static const char git_version_Describe[15] = "90760608-dirty";
440c447
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
444c451
<    int32_t err = fstat(fd, &statbuf);
---
>    int32_t err = fstat64(fd, &statbuf);
446c453
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
513c520
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__error() != EEXIST))) return -1;
518c525
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
530c537
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
551c558
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__error();
560c567
<    return ((stat(filename, &statbuf) == 0));
---
>    return ((stat64(filename, &statbuf) == 0));
568c575
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__error()));
573c580
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__error()));
1922,1923c1929,1930
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf(__stderrp, "[exec] %s\n", msg);
>    fflush(__stderrp);
1932c1939
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
1936c1943
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
1940c1947
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
1945c1952
<       fprintf(stderr, "fork() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror(*__error()));
1955c1962
<       fflush(stdout);
---
>       fflush(__stdoutp);
1959c1966
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
1964c1971
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
1971c1978
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
1981,1982c1988,1989
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
1993c2000
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2003c2010
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2046c2053
<       if (((((size_t)(len3)) < size) && (stat(dest, &statbuf) == 0))) return dest;
---
>       if (((((size_t)(len3)) < size) && (stat64(dest, &statbuf) == 0))) return dest;
2060c2067
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
2064c2071
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
2068c2075
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
2073c2080
<       fprintf(stderr, "fork() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fork() failed: %s\n", strerror(*__error()));
2083c2090
<       fflush(stdout);
---
>       fflush(__stdoutp);
2087c2094
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
2092c2099
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
2099c2106
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
2112,2113c2119,2120
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2124c2131
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2134c2141
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2343c2350
<       int32_t error = stat(constants_recipe_name, &buf);
---
>       int32_t error = stat64(constants_recipe_name, &buf);
2347c2354
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__error() != ENOENT)) {
2375c2382
<    int32_t error = stat(constants_buildfile_name, &buf);
---
>    int32_t error = stat64(constants_buildfile_name, &buf);
3292c3299
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3294c3301
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
3307c3314
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
3309c3316
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
3322c3329
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf(__stderrp, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
3324c3331
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf(__stderrp, "%s: error: %s\n", loc, buf);
3570c3577
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3572c3579
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3625c3632
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3670c3677
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
4035c4042
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__error()));
5044c5051
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
5091c5098
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
5109c5116
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
5754c5761
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf(__stderrp, "%s\n", string_buffer_Buf_data(out));
5785c5792
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
19970c19977
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19972c19979
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
32751c32758
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
32776c32783
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
32782c32789
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
32847c32854
< static const char* plugin_mgr_lib_ext = ".so";
---
> static const char* plugin_mgr_lib_ext = ".dylib";
32931c32938
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__error()));
32934c32941
<       dirent* entry = readdir(dir);
---
>       dirent* entry = readdir$INODE64(dir);
32939c32946
<          entry = readdir(dir);
---
>          entry = readdir$INODE64(dir);
38055c38062
<       int32_t err = stat(fullpath, &statbuf);
---
>       int32_t err = stat64(fullpath, &statbuf);
38127c38134
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__error()));
38131c38138
<    dirent* entry = readdir(dir);
---
>    dirent* entry = readdir$INODE64(dir);
38137c38144
<          int32_t err = stat(fullname, &statbuf);
---
>          int32_t err = stat64(fullname, &statbuf);
38183c38190
<       entry = readdir(dir);
---
>       entry = readdir$INODE64(dir);
38458c38465
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__error()));
