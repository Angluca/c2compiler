132c132
< int32_t* __errno_location(void);
---
> int32_t* __error(void);
175c175
<    int64_t d_off;
---
>    uint64_t d_seekoff;
176a177
>    uint16_t d_namlen;
178c179
<    char d_name[256];
---
>    char d_name[1024];
185c186
< dirent* readdir(DIR* dirp);
---
> dirent* readdir$INODE64(DIR* dirp);
192,198c193,199
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
< #define AT_FDCWD -100
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0400000
> #define O_DIRECTORY 04000000
> #define AT_FDCWD -2
229c230
< extern FILE* stdout;
---
> extern FILE* __stdoutp;
231c232
< extern FILE* stderr;
---
> extern FILE* __stderrp;
306a308,312
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
308c314,316
<    uint64_t st_dev;
---
>    int32_t st_dev;
>    uint16_t st_mode;
>    uint16_t st_nlink;
310,311d317
<    uint64_t st_nlink;
<    uint32_t st_mode;
314,324c320,331
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
<    int64_t st_blocks;
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    uint32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    struct timespec st_birthtimespec;
>    uint64_t st_size;
>    uint64_t st_blocks;
>    uint32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    int32_t st_lspare;
>    int64_t st_qspare[2];
331,332c338,339
< int32_t fstat(int32_t fd, struct stat* buf);
< int32_t stat(const char* pathname, struct stat* buf);
---
> int32_t fstat64(int32_t fd, struct stat* buf);
> int32_t stat64(const char* pathname, struct stat* buf);
342c349
< typedef int64_t suseconds_t;
---
> typedef int32_t suseconds_t;
360c367
< #define NAME_LEN 65
---
> #define NAME_LEN 256
362,367c369,374
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
406c413
< static const char git_version_Describe[9] = "8adcb677";
---
> static const char git_version_Describe[15] = "8adcb677-dirty";
446c453
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
450c457
<    int32_t err = fstat(fd, &statbuf);
---
>    int32_t err = fstat64(fd, &statbuf);
452c459
<       file->errno = *__errno_location();
---
>       file->errno = *__error();
519c526
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__error() != EEXIST))) return -1;
524c531
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
536c543
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__error();
557c564
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__error();
566c573
<    return ((stat(filename, &statbuf) == 0));
---
>    return ((stat64(filename, &statbuf) == 0));
574c581
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__error()));
579c586
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__error()));
1929,1930c1936,1937
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf(__stderrp, "[exec] %s\n", msg);
>    fflush(__stderrp);
1938c1945
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
1942c1949
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
1946c1953
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
1957c1964
<       fflush(stdout);
---
>       fflush(__stdoutp);
1961c1968
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
1966c1973
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
1973c1980
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
1983,1984c1990,1991
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
1995c2002
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2005c2012
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2048c2055
<       if (((((size_t)(len3)) < size) && (stat(dest, &statbuf) == 0))) return dest;
---
>       if (((((size_t)(len3)) < size) && (stat64(dest, &statbuf) == 0))) return dest;
2061c2068
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "pipe() failed: %s\n", strerror(*__error()));
2065c2072
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__error()));
2069c2076
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf(__stderrp, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__error()));
2080c2087
<       fflush(stdout);
---
>       fflush(__stdoutp);
2084c2091
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__error()));
2089c2096
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__error()));
2096c2103
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__error()));
2109,2110c2116,2117
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__error();
>       fprintf(__stderrp, "failed to start %s: %s\n", cmd, strerror(lasterr));
2121c2128
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf(__stderrp, "Error reading pipe\n");
2131c2138
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf(__stderrp, "Error waiting for pid: %s\n", strerror(*__error()));
2321c2328
<       int32_t error = stat(constants_recipe_name, &buf);
---
>       int32_t error = stat64(constants_recipe_name, &buf);
2325c2332
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__error() != ENOENT)) {
2353c2360
<    int32_t error = stat(constants_buildfile_name, &buf);
---
>    int32_t error = stat64(constants_buildfile_name, &buf);
3195c3202
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf(__stderrp, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3197c3204
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf(__stderrp, "warning: %s\n", buf);
3210c3217
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf(__stderrp, "%serror: %s%s\n", color_Red, buf, color_Normal);
3212c3219
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf(__stderrp, "error: %s\n", buf);
3225c3232
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf(__stderrp, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
3227c3234
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf(__stderrp, "%s: error: %s\n", loc, buf);
3473c3480
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3475c3482
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf(__stderrp, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3528c3535
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3573c3580
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf(__stderrp, "%serror%s: too many files open\n", color_Red, color_Normal);
3938c3945
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__error()));
4956c4963
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf(__stderrp, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
5003c5010
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf(__stderrp, "[build-file] missing options for %s\n", name);
5021c5028
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf(__stderrp, "Error: %s\n", yaml_Parser_getMessage(parser));
5650c5657
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf(__stderrp, "%s\n", string_buffer_Buf_data(out));
5681c5688
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), __stderrp);
19803c19810
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf(__stderrp, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19805c19812
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf(__stderrp, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
32490c32497
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf(__stderrp, "error: missing node %s\n", path);
32514c32521
<             fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>             fprintf(__stderrp, "error in manifest: invalid library kind '%s'\n", kind);
32521c32528
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf(__stderrp, "error in manifest: a library must be dynamic and/or static\n");
32586c32593
< static const char* plugin_mgr_lib_ext = ".so";
---
> static const char* plugin_mgr_lib_ext = ".dylib";
32670c32677
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__error()));
32673c32680
<       dirent* entry = readdir(dir);
---
>       dirent* entry = readdir$INODE64(dir);
32678c32685
<          entry = readdir(dir);
---
>          entry = readdir$INODE64(dir);
37822c37829
<       int32_t err = stat(fullpath, &statbuf);
---
>       int32_t err = stat64(fullpath, &statbuf);
37894c37901
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__error()));
37898c37905
<    dirent* entry = readdir(dir);
---
>    dirent* entry = readdir$INODE64(dir);
37904c37911
<          int32_t err = stat(fullname, &statbuf);
---
>          int32_t err = stat64(fullname, &statbuf);
37950c37957
<       entry = readdir(dir);
---
>       entry = readdir$INODE64(dir);
38212c38219
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__error()));
