91a92,93
> typedef int16_t c2_c_short;
> 
121c123
< extern int* __errno_location(void);
---
> extern int* __errno(void);
168c170
<    int64_t d_off;
---
>    uint64_t d_seekoff;
170a173,174
>    uint8_t d_namlen;
>    uint8_t __d_padding[4];
186,187c190,191
< #define O_CREAT 0100
< #define O_TRUNC 01000
---
> #define O_CREAT 01000
> #define O_TRUNC 02000
205a210
> typedef struct Sbuf___ Sbuf__;
215a221,225
> struct Sbuf___ {
>    uint8_t* _base;
>    int32_t _size;
> };
> 
216a227,246
>    uint8_t* _p;
>    int32_t _r;
>    int32_t _w;
>    int16_t _flags;
>    int16_t _file;
>    Sbuf__ _bf;
>    int32_t _lbfsize;
>    void* _cookie;
>    void* _close;
>    void* _read;
>    void* _seek;
>    void* _write;
>    Sbuf__ _ext;
>    uint8_t* _up;
>    int32_t _ur;
>    uint8_t _ubuf[3];
>    uint8_t _nbuf[1];
>    Sbuf__ _lb;
>    int32_t _blksize;
>    int64_t _offset;
219c249
< extern FILE* stdout;
---
> extern FILE __sF[];
221c251
< extern FILE* stderr;
---
> extern FILE __sF[];
300a331,335
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
302,304d336
<    uint64_t st_dev;
<    uint64_t st_ino;
<    uint64_t st_nlink;
305a338,340
>    int32_t st_dev;
>    uint64_t st_ino;
>    uint32_t st_nlink;
308,310c343,347
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
---
>    int32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    uint64_t st_size;
312,318c349,352
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    int32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    struct timespec st_birthtimespec;
354c388
< #define NAME_LEN 65
---
> #define NAME_LEN 256
356,361c390,395
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
2223c2257
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
2225c2259
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf((&__sF[2]), "warning: %s\n", buf);
2238c2272
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%serror: %s%s\n", color_Red, buf, color_Normal);
2240c2274
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf((&__sF[2]), "error: %s\n", buf);
2253c2287
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
2255c2289
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", loc, buf);
2331c2365
<       file->error = (*__errno_location());
---
>       file->error = (*__errno());
2336c2370
<       file->error = (*__errno_location());
---
>       file->error = (*__errno());
2353c2387
<          file->error = (*__errno_location());
---
>          file->error = (*__errno());
2423c2457
<       writer->error = (*__errno_location());
---
>       writer->error = (*__errno());
2428c2462
<       writer->error = (*__errno_location());
---
>       writer->error = (*__errno());
2458c2492
<    if ((fd == -1)) return (*__errno_location());
---
>    if ((fd == -1)) return (*__errno());
2465c2499
<       if (chdir("/")) errno_ = (*__errno_location());
---
>       if (chdir("/")) errno_ = (*__errno());
2477,2478c2511,2512
<          if ((((mkdir(tmp, 0777) && ((*__errno_location()) != EEXIST))) || chdir(tmp))) {
<             errno_ = (*__errno_location());
---
>          if ((((mkdir(tmp, 0777) && ((*__errno()) != EEXIST))) || chdir(tmp))) {
>             errno_ = (*__errno());
2482c2516
<          if ((mkdir(cp, 0777) && ((*__errno_location()) != EEXIST))) errno_ = (*__errno_location());
---
>          if ((mkdir(cp, 0777) && ((*__errno()) != EEXIST))) errno_ = (*__errno());
2697,2698c2731,2732
<       fprintf(stderr, "[exec] %s\n", msg);
<       fflush(stderr);
---
>       fprintf((&__sF[2]), "[exec] %s\n", msg);
>       fflush((&__sF[2]));
2708c2742
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror((*__errno())));
2712c2746
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno())));
2719c2753
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fork() failed: %s\n", strerror((*__errno())));
2731c2765
<          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno_location())));
---
>          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno())));
2734c2768
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__errno()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno())));
2741c2775
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno())));
2758c2792
<       fflush(stdout);
---
>       fflush((&__sF[1]));
2760,2761c2794,2795
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__errno());
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2770c2804
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2782c2816
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror((*__errno())));
2839c2873
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror((*__errno())));
2843c2877
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno())));
2850c2884
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror((*__errno())));
2857c2891
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fork() failed: %s\n", strerror((*__errno())));
2868c2902
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno_location())));
---
>          if (((*__errno()) != EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno())));
2872c2906
<          if (((*__errno_location()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__errno()) != EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno())));
2876c2910
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno())));
2892,2893c2926,2927
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__errno());
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2903c2937
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2918c2952
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror((*__errno())));
2932c2966
<             fprintf(stderr, "error reading process output\n");
---
>             fprintf((&__sF[2]), "error reading process output\n");
2945c2979
<          fprintf(stderr, "child exited ABNORMALLY\n");
---
>          fprintf((&__sF[2]), "child exited ABNORMALLY\n");
3175c3209
<          fprintf(stderr, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf((&__sF[2]), "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3177c3211
<          fprintf(stderr, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf((&__sF[2]), "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3231c3265
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3277c3311
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3724c3758
<          if (((*__errno_location()) != ENOENT)) {
---
>          if (((*__errno()) != ENOENT)) {
3918c3952
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf((&__sF[2]), "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
3965c3999
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf((&__sF[2]), "[build-file] missing options for %s\n", name);
3983c4017
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf((&__sF[2]), "Error: %s\n", yaml_Parser_getMessage(parser));
4320c4354
<       console_error("error getting system info: %s", strerror((*__errno_location())));
---
>       console_error("error getting system info: %s", strerror((*__errno())));
5052c5086
< static const char git_version_Describe[9] = "7c4508ea";
---
> static const char git_version_Describe[15] = "7c4508ea-dirty";
16802c16836
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), (&__sF[1]));
17600c17634
<    fputs(string_buffer_Buf_data(out), stderr);
---
>    fputs(string_buffer_Buf_data(out), (&__sF[2]));
17631c17665
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), (&__sF[2]));
19589c19623
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19591c19625
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
30376c30410
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf((&__sF[2]), "error: missing node %s\n", path);
30401c30435
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf((&__sF[2]), "error in manifest: invalid library kind '%s'\n", kind);
30407c30441
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf((&__sF[2]), "error in manifest: a library must be dynamic and/or static\n");
30556c30590
<          console_warn("cannot read '%s': %s", path, strerror((*__errno_location())));
---
>          console_warn("cannot read '%s': %s", path, strerror((*__errno())));
31975a32010
>    make = "gmake";
34277a34313
>    make = "gmake";
45228c45264
<       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno_location())));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno())));
45627c45663
<          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno_location())));
---
>          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno())));
