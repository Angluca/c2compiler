132c132
< int32_t* __errno_location(void);
---
> int32_t* __errno(void);
175c175
<    int64_t d_off;
---
>    uint64_t d_seekoff;
177a178,179
>    uint8_t d_namlen;
>    uint8_t __d_padding[4];
192,197c194,199
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0100000
> #define O_DIRECTORY 0400000
215a218
> typedef struct Sbuf___ Sbuf__;
225a229,233
> struct Sbuf___ {
>    uint8_t* _base;
>    int32_t _size;
> };
> 
226a235,254
>    uint8_t* _p;
>    int32_t _r;
>    int32_t _w;
>    int16_t _flags;
>    int16_t _file;
>    Sbuf__ _bf;
>    int32_t _lbfsize;
>    void* _cookie;
>    void* _close;
>    void* _read;
>    void* _seek;
>    void* _write;
>    Sbuf__ _ext;
>    uint8_t* _up;
>    int32_t _ur;
>    uint8_t _ubuf[3];
>    uint8_t _nbuf[1];
>    Sbuf__ _lb;
>    int32_t _blksize;
>    int64_t _offset;
229c257
< extern FILE* stdout;
---
> extern FILE __sF[];
231c259
< extern FILE* stderr;
---
> extern FILE __sF[];
307a336,340
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
309,311d341
<    uint64_t st_dev;
<    uint64_t st_ino;
<    uint64_t st_nlink;
312a343,345
>    int32_t st_dev;
>    uint64_t st_ino;
>    uint32_t st_nlink;
315,317c348,352
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
---
>    int32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    uint64_t st_size;
319,325c354,357
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    int32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    struct timespec st_birthtimespec;
361c393
< #define NAME_LEN 65
---
> #define NAME_LEN 256
363,368c395,400
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
407c439
< #define git_version_Describe "17cf2f69"
---
> #define git_version_Describe "17cf2f69-dirty"
446c478
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
452c484
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
519c551
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__errno() != EEXIST))) return -1;
524c556
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
536c568
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
557c589
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__errno();
574c606
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno()));
579c611
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno()));
1929,1930c1961,1962
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf((&__sF[2]), "[exec] %s\n", msg);
>    fflush((&__sF[2]));
1938c1970
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
1942c1974
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
1946c1978
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
1957c1989
<       fflush(stdout);
---
>       fflush((&__sF[1]));
1961c1993
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
1966c1998
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
1971c2003
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
1981,1982c2013,2014
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
1993c2025
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2003c2035
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2062c2094
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
2066c2098
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
2070c2102
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
2081c2113
<       fflush(stdout);
---
>       fflush((&__sF[1]));
2085c2117
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
2090c2122
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
2095c2127
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
2108,2109c2140,2141
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2120c2152
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2130c2162
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2322c2354
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__errno() != ENOENT)) {
3181c3213
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3183c3215
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf((&__sF[2]), "warning: %s\n", buf);
3196c3228
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%serror: %s%s\n", color_Red, buf, color_Normal);
3198c3230
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf((&__sF[2]), "error: %s\n", buf);
3211c3243
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
3213c3245
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", loc, buf);
3450c3482
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3452c3484
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3505c3537
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3549c3581
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3914c3946
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__errno()));
4926c4958
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf((&__sF[2]), "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
4973c5005
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf((&__sF[2]), "[build-file] missing options for %s\n", name);
4991c5023
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf((&__sF[2]), "Error: %s\n", yaml_Parser_getMessage(parser));
5620c5652
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf((&__sF[2]), "%s\n", string_buffer_Buf_data(out));
5651c5683
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), (&__sF[2]));
19643c19675
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19645c19677
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
31969c32001
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf((&__sF[2]), "error: missing node %s\n", path);
31993c32025
<             fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>             fprintf((&__sF[2]), "error in manifest: invalid library kind '%s'\n", kind);
32000c32032
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf((&__sF[2]), "error in manifest: a library must be dynamic and/or static\n");
32149c32181
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__errno()));
33513a33546
>    make = "gmake";
37256c37289
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno()));
37624c37657
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno()));
