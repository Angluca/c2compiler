89a90,91
> typedef int16_t c_short;
> 
128c130
< extern int* __errno_location(void);
---
> extern int* __errno(void);
132c134
< #define c_errno_ENAMETOOLONG 36
---
> #define c_errno_ENAMETOOLONG 63
175c177
<    c_longlong d_off;
---
>    c_ulonglong d_seekoff;
177a180,181
>    uint8_t d_namlen;
>    uint8_t __d_padding[4];
193,194c197,200
< #define libc_fcntl_O_CREAT 0100
< #define libc_fcntl_O_TRUNC 01000
---
> #define libc_fcntl_O_NONBLOCK 04
> #define libc_fcntl_O_CREAT 01000
> #define libc_fcntl_O_TRUNC 02000
> #define libc_fcntl_O_CLOEXEC 0200000
202a209
> typedef struct Sbuf___ Sbuf__;
212a220,224
> struct Sbuf___ {
>    uint8_t* _base;
>    c_int _size;
> };
> 
213a226,245
>    uint8_t* _p;
>    c_int _r;
>    c_int _w;
>    c_short _flags;
>    c_short _file;
>    Sbuf__ _bf;
>    c_int _lbfsize;
>    void* _cookie;
>    void* _close;
>    void* _read;
>    void* _seek;
>    void* _write;
>    Sbuf__ _ext;
>    uint8_t* _up;
>    c_int _ur;
>    uint8_t _ubuf[3];
>    uint8_t _nbuf[1];
>    Sbuf__ _lb;
>    c_int _blksize;
>    int64_t _offset;
216,217c248,249
< extern FILE* stdout;
< extern FILE* stderr;
---
> extern FILE __sF[];
> extern FILE __sF[];
294a327,331
> struct timespec {
>    c_long tv_sec;
>    c_long tv_nsec;
> };
> 
296,299c333,336
<    c_ulong st_dev;
<    c_ulong st_ino;
<    c_ulong st_nlink;
<    c_uint st_mode;
---
>    uint32_t st_mode;
>    int32_t st_dev;
>    uint64_t st_ino;
>    uint32_t st_nlink;
302,312c339,348
<    c_ulong st_rdev;
<    c_long st_size;
<    c_long st_blksize;
<    c_long st_blocks;
<    c_long st_atime;
<    c_long st_atime_nsec;
<    c_long st_mtime;
<    c_long st_mtime_nsec;
<    c_long st_ctime;
<    c_long st_ctime_nsec;
<    c_long reserved[3];
---
>    int32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    c_ulong st_size;
>    int64_t st_blocks;
>    int32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    struct timespec st_birthtimespec;
348c384
< #define sys_utsname_NAME_LEN 65
---
> #define sys_utsname_NAME_LEN 256
350,355c386,391
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
383c419
< #define dlfcn_RTLD_DEFAULT ((void*)((size_t)(0)))
---
> #define dlfcn_RTLD_DEFAULT ((void*)((size_t)(-2)))
2281c2317
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
2283c2319
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf((&__sF[2]), "warning: %s\n", buf);
2296c2332
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%serror: %s%s\n", color_Red, buf, color_Normal);
2298c2334
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf((&__sF[2]), "error: %s\n", buf);
2311c2347
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
2313c2349
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", loc, buf);
2374c2410
<          if (((*__errno_location()) != c_errno_EINTR)) return -1;
---
>          if (((*__errno()) != c_errno_EINTR)) return -1;
2388c2424
<       file->error = (*__errno_location());
---
>       file->error = (*__errno());
2393c2429
<       file->error = (*__errno_location());
---
>       file->error = (*__errno());
2411c2447
<       file->error = (*__errno_location());
---
>       file->error = (*__errno());
2489c2525
<          if (((*__errno_location()) != c_errno_EINTR)) return -1;
---
>          if (((*__errno()) != c_errno_EINTR)) return -1;
2501c2537
<       writer->error = (*__errno_location());
---
>       writer->error = (*__errno());
2506c2542
<       writer->error = (*__errno_location());
---
>       writer->error = (*__errno());
2544c2580
<          if ((mkdir(tmp, 0777) && ((*__errno_location()) != c_errno_EEXIST))) return (*__errno_location());
---
>          if ((mkdir(tmp, 0777) && ((*__errno()) != c_errno_EEXIST))) return (*__errno());
2762,2763c2798,2799
<       fprintf(stderr, "[exec] %s\n", msg);
<       fflush(stderr);
---
>       fprintf((&__sF[2]), "[exec] %s\n", msg);
>       fflush((&__sF[2]));
2773c2809
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror((*__errno())));
2777c2813
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno())));
2784c2820
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fork() failed: %s\n", strerror((*__errno())));
2796c2832
<          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno_location())));
---
>          process_utils_child_error(error_pipe[1], "cannot open output '%s': %s", filename, strerror((*__errno())));
2799c2835
<          if (((*__errno_location()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__errno()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno())));
2806c2842
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno())));
2823c2859
<       fflush(stdout);
---
>       fflush((&__sF[1]));
2825,2826c2861,2862
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__errno());
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2835c2871
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2847c2883
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror((*__errno())));
2904c2940
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror((*__errno())));
2908c2944
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror((*__errno())));
2915c2951
<       fprintf(stderr, "pipe() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror((*__errno())));
2922c2958
<       fprintf(stderr, "fork() failed: %s\n", strerror((*__errno_location())));
---
>       fprintf((&__sF[2]), "fork() failed: %s\n", strerror((*__errno())));
2933c2969
<          if (((*__errno_location()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno_location())));
---
>          if (((*__errno()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup(): %s", strerror((*__errno())));
2937c2973
<          if (((*__errno_location()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno_location())));
---
>          if (((*__errno()) != c_errno_EINTR)) process_utils_child_error(error_pipe[1], "dup2(): %s", strerror((*__errno())));
2941c2977
<             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno_location())));
---
>             process_utils_child_error(error_pipe[1], "cannot change to dir '%s': %s", path, strerror((*__errno())));
2957,2958c2993,2994
<       int32_t lasterr = (*__errno_location());
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = (*__errno());
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2968c3004
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2983c3019
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror((*__errno_location())));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror((*__errno())));
2997c3033
<             fprintf(stderr, "error reading process output\n");
---
>             fprintf((&__sF[2]), "error reading process output\n");
3010c3046
<          fprintf(stderr, "child exited ABNORMALLY\n");
---
>          fprintf((&__sF[2]), "child exited ABNORMALLY\n");
3240c3276
<          fprintf(stderr, "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf((&__sF[2]), "%s: %serror:%s cannot open %s: %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3242c3278
<          fprintf(stderr, "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
---
>          fprintf((&__sF[2]), "%serror%s: cannot open %s: %s\n", color_Red, color_Normal, filename, file_utils_Reader_getError(&file));
3296c3332
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3342c3378
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3789c3825
<          if (((*__errno_location()) != c_errno_ENOENT)) {
---
>          if (((*__errno()) != c_errno_ENOENT)) {
3983c4019
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf((&__sF[2]), "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
4030c4066
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf((&__sF[2]), "[build-file] missing options for %s\n", name);
4048c4084
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf((&__sF[2]), "Error: %s\n", yaml_Parser_getMessage(parser));
4398c4434
<       console_error("error getting system info: %s", strerror((*__errno_location())));
---
>       console_error("error getting system info: %s", strerror((*__errno())));
5757c5793
< static const char git_version_Describe[9] = "c49d6103";
---
> static const char git_version_Describe[15] = "c49d6103-dirty";
17988c18024
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), (&__sF[1]));
19376c19412
<    fputs(string_buffer_Buf_data(out), stderr);
---
>    fputs(string_buffer_Buf_data(out), (&__sF[2]));
19407c19443
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), (&__sF[2]));
21254c21290
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
21256c21292
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
37480c37516
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf((&__sF[2]), "error: missing node %s\n", path);
37505c37541
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf((&__sF[2]), "error in manifest: invalid library kind '%s'\n", kind);
37511c37547
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf((&__sF[2]), "error in manifest: a library must be dynamic and/or static\n");
37662c37698
<          console_warn("cannot read '%s': %s", path, strerror((*__errno_location())));
---
>          console_warn("cannot read '%s': %s", path, strerror((*__errno())));
39054a39091
>    make = "gmake";
41537c41574
<    fputs(string_buffer_Buf_data(out), stdout);
---
>    fputs(string_buffer_Buf_data(out), (&__sF[1]));
45906c45943
<       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno_location())));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror((*__errno())));
46297c46334
<          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno_location())));
---
>          console_error("c2c: cannot chdir to %s: %s", c->opts.other_dir, strerror((*__errno())));
