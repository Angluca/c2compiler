132c132
< int32_t* __errno_location(void);
---
> int32_t* __errno(void);
174c174
<    int64_t d_off;
---
>    uint64_t d_seekoff;
176a177,178
>    uint8_t d_namlen;
>    uint8_t __d_padding[4];
191,196c193,198
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0100000
> #define O_DIRECTORY 0400000
206a209
> typedef struct Sbuf___ Sbuf__;
216a220,224
> struct Sbuf___ {
>    uint8_t* _base;
>    int32_t _size;
> };
> 
217a226,245
>    uint8_t* _p;
>    int32_t _r;
>    int32_t _w;
>    int16_t _flags;
>    int16_t _file;
>    Sbuf__ _bf;
>    int32_t _lbfsize;
>    void* _cookie;
>    void* _close;
>    void* _read;
>    void* _seek;
>    void* _write;
>    Sbuf__ _ext;
>    uint8_t* _up;
>    int32_t _ur;
>    uint8_t _ubuf[3];
>    uint8_t _nbuf[1];
>    Sbuf__ _lb;
>    int32_t _blksize;
>    int64_t _offset;
220c248
< extern FILE* stdout;
---
> extern FILE __sF[];
222c250
< extern FILE* stderr;
---
> extern FILE __sF[];
257a286,290
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
259,261d291
<    uint64_t st_dev;
<    uint64_t st_ino;
<    uint64_t st_nlink;
262a293,295
>    int32_t st_dev;
>    uint64_t st_ino;
>    uint32_t st_nlink;
265,267c298,302
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
---
>    int32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    uint64_t st_size;
269,275c304,307
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    int32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    struct timespec st_birthtimespec;
311c343
< #define NAME_LEN 65
---
> #define NAME_LEN 256
313,318c345,350
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
448c480
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
454c486
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
521c553
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__errno() != EEXIST))) return -1;
526c558
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
538c570
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
559c591
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__errno();
576c608
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno()));
581c613
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno()));
1930,1931c1962,1963
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf((&__sF[2]), "[exec] %s\n", msg);
>    fflush((&__sF[2]));
1939c1971
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
1943c1975
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
1947c1979
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
1958c1990
<       fflush(stdout);
---
>       fflush((&__sF[1]));
1962c1994
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
1967c1999
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
1972c2004
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
1982,1983c2014,2015
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
1994c2026
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2004c2036
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2063c2095
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
2067c2099
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
2071c2103
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
2082c2114
<       fflush(stdout);
---
>       fflush((&__sF[1]));
2086c2118
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
2091c2123
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
2096c2128
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
2109,2110c2141,2142
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2121c2153
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2131c2163
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2323c2355
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__errno() != ENOENT)) {
3261c3293
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3263c3295
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf((&__sF[2]), "warning: %s\n", buf);
3276c3308
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%serror: %s%s\n", color_Red, buf, color_Normal);
3278c3310
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf((&__sF[2]), "error: %s\n", buf);
3515c3547
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3517c3549
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3570c3602
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3614c3646
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3986c4018
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__errno()));
4958c4990
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf((&__sF[2]), "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
5005c5037
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf((&__sF[2]), "[build-file] missing options for %s\n", name);
5022c5054
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf((&__sF[2]), "Error: %s\n", yaml_Parser_getMessage(parser));
5651c5683
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf((&__sF[2]), "%s\n", string_buffer_Buf_data(out));
5682c5714
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), (&__sF[2]));
19423c19455
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19425c19457
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
31643c31675
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf((&__sF[2]), "error: missing node %s\n", path);
31667c31699
<             fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>             fprintf((&__sF[2]), "error in manifest: invalid library kind '%s'\n", kind);
31674c31706
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf((&__sF[2]), "error in manifest: a library must be dynamic and/or static\n");
31816c31848
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__errno()));
33224a33257
>    make = "gmake";
36970c37003
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno()));
37338c37371
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno()));
