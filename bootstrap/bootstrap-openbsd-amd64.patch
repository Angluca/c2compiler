92a93,94
> typedef int16_t c2_c_short;
> 
124c126
< int32_t* __errno_location(void);
---
> int32_t* __errno(void);
167c169
<    int64_t d_off;
---
>    uint64_t d_seekoff;
169a172,173
>    uint8_t d_namlen;
>    uint8_t __d_padding[4];
184,189c188,193
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0100000
> #define O_DIRECTORY 0400000
207a212
> typedef struct Sbuf___ Sbuf__;
217a223,227
> struct Sbuf___ {
>    uint8_t* _base;
>    int32_t _size;
> };
> 
218a229,248
>    uint8_t* _p;
>    int32_t _r;
>    int32_t _w;
>    int16_t _flags;
>    int16_t _file;
>    Sbuf__ _bf;
>    int32_t _lbfsize;
>    void* _cookie;
>    void* _close;
>    void* _read;
>    void* _seek;
>    void* _write;
>    Sbuf__ _ext;
>    uint8_t* _up;
>    int32_t _ur;
>    uint8_t _ubuf[3];
>    uint8_t _nbuf[1];
>    Sbuf__ _lb;
>    int32_t _blksize;
>    int64_t _offset;
221c251
< extern FILE* stdout;
---
> extern FILE __sF[];
223c253
< extern FILE* stderr;
---
> extern FILE __sF[];
300a331,335
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
302,304d336
<    uint64_t st_dev;
<    uint64_t st_ino;
<    uint64_t st_nlink;
305a338,340
>    int32_t st_dev;
>    uint64_t st_ino;
>    uint32_t st_nlink;
308,310c343,347
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
---
>    int32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    uint64_t st_size;
312,318c349,352
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    int32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    struct timespec st_birthtimespec;
354c388
< #define NAME_LEN 65
---
> #define NAME_LEN 256
356,361c390,395
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
400c434
< static const char git_version_Describe[9] = "90760608";
---
> static const char git_version_Describe[15] = "90760608-dirty";
440c474
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
446c480
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
513c547
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__errno() != EEXIST))) return -1;
518c552
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
530c564
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
551c585
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__errno();
568c602
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno()));
573c607
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno()));
1922,1923c1956,1957
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf((&__sF[2]), "[exec] %s\n", msg);
>    fflush((&__sF[2]));
1932c1966
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
1936c1970
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
1940c1974
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
1945c1979
<       fprintf(stderr, "fork() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fork() failed: %s\n", strerror(*__errno()));
1955c1989
<       fflush(stdout);
---
>       fflush((&__sF[1]));
1959c1993
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
1964c1998
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
1971c2005
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
1981,1982c2015,2016
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
1993c2027
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2003c2037
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2060c2094
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
2064c2098
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
2068c2102
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
2073c2107
<       fprintf(stderr, "fork() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fork() failed: %s\n", strerror(*__errno()));
2083c2117
<       fflush(stdout);
---
>       fflush((&__sF[1]));
2087c2121
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
2092c2126
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
2099c2133
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
2112,2113c2146,2147
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2124c2158
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2134c2168
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2347c2381
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__errno() != ENOENT)) {
3292c3326
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3294c3328
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf((&__sF[2]), "warning: %s\n", buf);
3307c3341
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%serror: %s%s\n", color_Red, buf, color_Normal);
3309c3343
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf((&__sF[2]), "error: %s\n", buf);
3322c3356
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
3324c3358
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", loc, buf);
3570c3604
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3572c3606
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3625c3659
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3670c3704
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
4035c4069
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__errno()));
5044c5078
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf((&__sF[2]), "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
5091c5125
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf((&__sF[2]), "[build-file] missing options for %s\n", name);
5109c5143
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf((&__sF[2]), "Error: %s\n", yaml_Parser_getMessage(parser));
5754c5788
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf((&__sF[2]), "%s\n", string_buffer_Buf_data(out));
5785c5819
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), (&__sF[2]));
19970c20004
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19972c20006
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
32751c32785
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf((&__sF[2]), "error: missing node %s\n", path);
32776c32810
<          fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>          fprintf((&__sF[2]), "error in manifest: invalid library kind '%s'\n", kind);
32782c32816
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf((&__sF[2]), "error in manifest: a library must be dynamic and/or static\n");
32931c32965
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__errno()));
33734a33769
>    make = "gmake";
35957a35993
>    make = "gmake";
38127c38163
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno()));
38458c38494
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno()));
