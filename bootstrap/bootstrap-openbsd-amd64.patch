101a102,103
> typedef int16_t c2_c_short;
> 
132c134
< int32_t* __errno_location(void);
---
> int32_t* __errno(void);
175c177
<    int64_t d_off;
---
>    uint64_t d_seekoff;
177a180,181
>    uint8_t d_namlen;
>    uint8_t __d_padding[4];
192,197c196,201
< #define O_CREAT 0100
< #define O_NOCTTY 0400
< #define O_TRUNC 01000
< #define O_NONBLOCK 04000
< #define O_DIRECTORY 0200000
< #define O_NOFOLLOW 0400000
---
> #define O_NONBLOCK 04
> #define O_NOFOLLOW 0400
> #define O_CREAT 01000
> #define O_TRUNC 02000
> #define O_NOCTTY 0100000
> #define O_DIRECTORY 0400000
215a220
> typedef struct Sbuf___ Sbuf__;
225a231,235
> struct Sbuf___ {
>    uint8_t* _base;
>    int32_t _size;
> };
> 
226a237,256
>    uint8_t* _p;
>    int32_t _r;
>    int32_t _w;
>    int16_t _flags;
>    int16_t _file;
>    Sbuf__ _bf;
>    int32_t _lbfsize;
>    void* _cookie;
>    void* _close;
>    void* _read;
>    void* _seek;
>    void* _write;
>    Sbuf__ _ext;
>    uint8_t* _up;
>    int32_t _ur;
>    uint8_t _ubuf[3];
>    uint8_t _nbuf[1];
>    Sbuf__ _lb;
>    int32_t _blksize;
>    int64_t _offset;
229c259
< extern FILE* stdout;
---
> extern FILE __sF[];
231c261
< extern FILE* stderr;
---
> extern FILE __sF[];
306a337,341
> struct timespec {
>    int64_t tv_sec;
>    int64_t tv_nsec;
> };
> 
308,310d342
<    uint64_t st_dev;
<    uint64_t st_ino;
<    uint64_t st_nlink;
311a344,346
>    int32_t st_dev;
>    uint64_t st_ino;
>    uint32_t st_nlink;
314,316c349,353
<    uint64_t st_rdev;
<    int64_t st_size;
<    int64_t st_blksize;
---
>    int32_t st_rdev;
>    struct timespec st_atimespec;
>    struct timespec st_mtimespec;
>    struct timespec st_ctimespec;
>    uint64_t st_size;
318,324c355,358
<    int64_t st_atime;
<    int64_t st_atime_nsec;
<    int64_t st_mtime;
<    int64_t st_mtime_nsec;
<    int64_t st_ctime;
<    int64_t st_ctime_nsec;
<    int64_t reserved[3];
---
>    int32_t st_blksize;
>    uint32_t st_flags;
>    uint32_t st_gen;
>    struct timespec st_birthtimespec;
360c394
< #define NAME_LEN 65
---
> #define NAME_LEN 256
362,367c396,401
<    char sysname[65];
<    char nodename[65];
<    char release[65];
<    char version[65];
<    char machine[65];
<    char domainname[65];
---
>    char sysname[256];
>    char nodename[256];
>    char release[256];
>    char version[256];
>    char machine[256];
>    char domainname[256];
406c440
< static const char git_version_Describe[9] = "8adcb677";
---
> static const char git_version_Describe[15] = "8adcb677-dirty";
446c480
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
452c486
<       file->errno = *__errno_location();
---
>       file->errno = *__errno();
519c553
<    if ((err && (*__errno_location() != EEXIST))) return -1;
---
>    if ((err && (*__errno() != EEXIST))) return -1;
524c558
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
536c570
<    if ((fd == -1)) return *__errno_location();
---
>    if ((fd == -1)) return *__errno();
557c591
<    if (err) errno_ = *__errno_location();
---
>    if (err) errno_ = *__errno();
574c608
<       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error opening %s: %s", filename, strerror(*__errno()));
579c613
<       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno_location()));
---
>       sprintf(writer->msg, "error writing %s: %s", filename, strerror(*__errno()));
1929,1930c1963,1964
<    fprintf(stderr, "[exec] %s\n", msg);
<    fflush(stderr);
---
>    fprintf((&__sF[2]), "[exec] %s\n", msg);
>    fflush((&__sF[2]));
1938c1972
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
1942c1976
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
1946c1980
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
1957c1991
<       fflush(stdout);
---
>       fflush((&__sF[1]));
1961c1995
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
1966c2000
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
1973c2007
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
1983,1984c2017,2018
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
1995c2029
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2005c2039
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2061c2095
<       fprintf(stderr, "pipe() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "pipe() failed: %s\n", strerror(*__errno()));
2065c2099
<       fprintf(stderr, "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC() failed: %s\n", strerror(*__errno()));
2069c2103
<       fprintf(stderr, "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno_location()));
---
>       fprintf((&__sF[2]), "fcncl(FD_CLOEXEC) failed: %s\n", strerror(*__errno()));
2080c2114
<       fflush(stdout);
---
>       fflush((&__sF[1]));
2084c2118
<          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot open output '%s': %s", output, strerror(*__errno()));
2089c2123
<          sprintf(errmsg, "dup(): %s", strerror(*__errno_location()));
---
>          sprintf(errmsg, "dup(): %s", strerror(*__errno()));
2096c2130
<          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno_location()));
---
>          sprintf(errmsg, "cannot change to dir '%s': %s", path, strerror(*__errno()));
2109,2110c2143,2144
<       int32_t lasterr = *__errno_location();
<       fprintf(stderr, "failed to start %s: %s\n", cmd, strerror(lasterr));
---
>       int32_t lasterr = *__errno();
>       fprintf((&__sF[2]), "failed to start %s: %s\n", cmd, strerror(lasterr));
2121c2155
<          fprintf(stderr, "Error reading pipe\n");
---
>          fprintf((&__sF[2]), "Error reading pipe\n");
2131c2165
<          fprintf(stderr, "Error waiting for pid: %s\n", strerror(*__errno_location()));
---
>          fprintf((&__sF[2]), "Error waiting for pid: %s\n", strerror(*__errno()));
2325c2359
<          if ((*__errno_location() != ENOENT)) {
---
>          if ((*__errno() != ENOENT)) {
3195c3229
<       fprintf(stderr, "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%swarning: %s%s\n", color_Yellow, buf, color_Normal);
3197c3231
<       fprintf(stderr, "warning: %s\n", buf);
---
>       fprintf((&__sF[2]), "warning: %s\n", buf);
3210c3244
<       fprintf(stderr, "%serror: %s%s\n", color_Red, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%serror: %s%s\n", color_Red, buf, color_Normal);
3212c3246
<       fprintf(stderr, "error: %s\n", buf);
---
>       fprintf((&__sF[2]), "error: %s\n", buf);
3225c3259
<       fprintf(stderr, "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
---
>       fprintf((&__sF[2]), "%s%s: error: %s%s\n", color_Red, loc, buf, color_Normal);
3227c3261
<       fprintf(stderr, "%s: error: %s\n", loc, buf);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", loc, buf);
3473c3507
<          fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(sm, loc), color_Red, color_Normal, error_msg);
3475c3509
<          fprintf(stderr, "%serror%s: %s\n", color_Red, color_Normal, error_msg);
---
>          fprintf((&__sF[2]), "%serror%s: %s\n", color_Red, color_Normal, error_msg);
3528c3562
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3573c3607
<          fprintf(stderr, "%serror%s: too many files open\n", color_Red, color_Normal);
---
>          fprintf((&__sF[2]), "%serror%s: too many files open\n", color_Red, color_Normal);
3938c3972
<       console_error("error getting system info: %s", strerror(*__errno_location()));
---
>       console_error("error getting system info: %s", strerror(*__errno()));
4956c4990
<          fprintf(stderr, "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
---
>          fprintf((&__sF[2]), "[build-file] warning: environment variable '%s' not set!\n", (raw + 1));
5003c5037
<             fprintf(stderr, "[build-file] missing options for %s\n", name);
---
>             fprintf((&__sF[2]), "[build-file] missing options for %s\n", name);
5021c5055
<       fprintf(stderr, "Error: %s\n", yaml_Parser_getMessage(parser));
---
>       fprintf((&__sF[2]), "Error: %s\n", yaml_Parser_getMessage(parser));
5650c5684
<    fprintf(stderr, "%s\n", string_buffer_Buf_data(out));
---
>    fprintf((&__sF[2]), "%s\n", string_buffer_Buf_data(out));
5681c5715
<       fputs(string_buffer_Buf_data(out), stderr);
---
>       fputs(string_buffer_Buf_data(out), (&__sF[2]));
19803c19837
<       fprintf(stderr, "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
---
>       fprintf((&__sF[2]), "%s: %serror:%s %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), color_Red, color_Normal, msg);
19805c19839
<       fprintf(stderr, "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
---
>       fprintf((&__sF[2]), "%s: error: %s\n", source_mgr_SourceMgr_loc2str(p->sm, p->token.loc), msg);
32490c32524
<       fprintf(stderr, "error: missing node %s\n", path);
---
>       fprintf((&__sF[2]), "error: missing node %s\n", path);
32514c32548
<             fprintf(stderr, "error in manifest: invalid library kind '%s'\n", kind);
---
>             fprintf((&__sF[2]), "error in manifest: invalid library kind '%s'\n", kind);
32521c32555
<       fprintf(stderr, "error in manifest: a library must be dynamic and/or static\n");
---
>       fprintf((&__sF[2]), "error in manifest: a library must be dynamic and/or static\n");
32670c32704
<          console_warn("cannot read '%s': %s", path, strerror(*__errno_location()));
---
>          console_warn("cannot read '%s': %s", path, strerror(*__errno()));
35702a35737
>    make = "gmake";
37894c37929
<       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno_location()));
---
>       console_error("cannot open library dir '%s': %s", dirname, strerror(*__errno()));
38212c38247
<          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno_location()));
---
>          console_error("cannot chdir to %s: %s", opts.other_dir, strerror(*__errno()));
