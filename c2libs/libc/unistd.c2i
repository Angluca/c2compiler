module unistd;

import c2 local;

/* Standard file descriptors.  */
const c_int STDIN_FILENO  = 0;
const c_int STDOUT_FILENO = 1;
const c_int STDERR_FILENO = 2;

// ifdef USE_XOPEN_EXTENDED ..
func i32 usleep(c_ulonglong __useconds);

func c_uint sleep(c_uint __seconds);
func c_char* getcwd(char* buf, c_size size);
func c_int chdir(const c_char* path);
func c_int fchdir(c_int fd);

func c_int close(c_int fd);

func c_long read(c_int fd, void* buf, c_ulong count);

const u8 R_OK = 4;
const u8 W_OK = 2;
const u8 X_OK = 1;
const u8 F_OK = 0;

func c_int isatty(c_int fd);

func c_ssize write(c_int fd, const void* buf, c_size count);

func c_int pipe(c_int* pipefd);

//#ifdef_GNU_SOURCE             /* See feature_test_macros(7) */
func c_int pipe2(c_int* pipefd, c_int flags);

func c_int unlink(const char* name);

func c_int rmdir(const char* path);


func c_int getopt(i32 argc, char** argv, const char* optstring);

char* optarg;
c_int optind;
c_int opterr;
c_int optopt;

func c_int fsync(c_int fd);

func void sync();

type Pid c_int @(cname="pid_t");

func Pid fork();

func Pid wait(c_int* wstatus);

func Pid waitpid(Pid pid, c_int* wstatus, c_int options);

func c_int dup(c_int oldfd);

func c_int dup2(c_int oldfd, c_int newfd);

func c_int dup3(c_int oldfd, c_int newfd, c_int flags);

func c_int execl(const char *pathname, const char *arg, ...);
func c_int execlp(const char *file, const char *arg, ...);
func c_int execle(const char *pathname, const char *arg, ...);
func c_int execv(const char *pathname, char** argv); // actually char* const argv[]
func c_int execvp(const char *file, char** argv);    // actually char* const argv[]
func c_int execvpe(const char *file, char** argv, const char** envp); // actually char* const envp[]

