/* Copyright 2022-2025 Charlie Gordon
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module utf8;

//public const u32 MB_CUR_MAX = 6;    // UTF-8 uses just 4

public fn u32 encode(char *dest, u32 max_len, u32 cc) {
    if (cc < 0x80) {
        if (max_len >= 1) {
            dest[0] = (char)cc;
            return 1;
        }
    } else
    if (cc < 0x800) {
        if (max_len >= 2) {
            dest[0] = (char)(0xC0 + (cc >> 6));
            dest[1] = (char)(0x80 + (cc & 0x3F));
            return 2;
        }
    } else
    if (cc < 0x10000) {
        if (max_len >= 3) {
            dest[0] = (char)(0xE0 + (cc >> 12));
            dest[1] = (char)(0x80 + ((cc >> 6) & 0x3F));
            dest[2] = (char)(0x80 + (cc & 0x3F));
            return 3;
        }
    } else
    if (cc < 0x110000) {
        if (max_len >= 4) {
            dest[0] = (char)(0xF0 + (cc >> 18));
            dest[1] = (char)(0x80 + ((cc >> 12) & 0x3F));
            dest[2] = (char)(0x80 + ((cc >> 6) & 0x3F));
            dest[3] = (char)(0x80 + (cc & 0x3F));
            return 4;
        }
    }
    return 0;
}

public fn u32 decode(const char *p, u32 max_len, u32* pc) {
    if (!max_len)
        return 0;

    u32 c = (u8)*p++;
    if (c < 0x80) {
        *pc = c;
        return 1;
    } else
    if (c < 0xC2) {
        // invalid prefix byte or naked trailing byte
    } else
    if (c < 0xE0) {
        if (max_len >= 2 && p[0] >= 0x80 && p[0] <= 0xBF) {
            *pc = ((c - 0xC0) << 6) + (p[0] - 0x80);
            return 2;
        }
    } else
    if (c < 0xF0) {
        if (max_len >= 3
        &&  p[0] >= 0x80 && p[0] <= 0xBF
        &&  p[1] >= 0x80 && p[1] <= 0xBF) {
            c = ((c - 0xE0) << 12) + ((p[0] - 0x80) << 6) + (p[1] - 0x80);
            if (c >= 0x800) {
                *pc = c;
                return 3;
            }
        }
    } else
    if (c <= 0xF4) {
        if (max_len >= 4
        &&  p[0] >= 0x80 && p[0] <= 0xBF
        &&  p[1] >= 0x80 && p[1] <= 0xBF
        &&  p[2] >= 0x80 && p[2] <= 0xBF) {
            c = ((c - 0xF0) << 18) + ((p[0] - 0x80) << 12) +
                ((p[1] - 0x80) << 6) + (p[2] - 0x80);
            if (c >= 0x10000 && c < 0x110000) {
                *pc = c;
                return 4;
            }
        }
    }
    return 0;
}

// skip UTF-8 continuation bytes to reach a character boundary
public fn u32 sync(const char* p) {
    u32 i = 0;
    while (i < 3 && (p[i] & 0xC0) == 0x80)
        i++;
    return i;
}

