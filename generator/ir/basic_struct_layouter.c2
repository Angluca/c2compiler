/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_generator;

import ast;
import ctv_analyser;

type BasicStructLayouter struct {
    Generator* gen;
    const ast.StructLayout* layout;
    u32 cur_offset;
    u32 bitfield_base_size;
    u64 bitfield_value;
}

fn void BasicStructLayouter.init(BasicStructLayouter* l,
                                     Generator* gen,
                                     const ast.StructLayout* layout) {
    l.gen = gen;
    l.layout = layout;
    l.cur_offset = 0;
    l.bitfield_value = 0;
    l.bitfield_base_size = 0;
}

// Note: idx must be in order, without skipping members (may stop before end)
fn void BasicStructLayouter.add(BasicStructLayouter* l,
                                 u32 idx,
                                 const ast.Expr* e) {
    const ast.StructMemberLayout* ml = &l.layout.members[idx];

    u32 offset = ml.offset;
    u32 pad = offset - l.cur_offset;
    if (pad) {
        if (l.bitfield_base_size) {
            pad -= l.bitfield_base_size;
            l.flushBitfield();
        }
        if (pad) l.gen.ctx.addInitZero(pad);
    }

    if (ml.is_bitfield) {
        l.bitfield_base_size = ml.size;
        if (e.isCtv()) {
            ast.Value value = ctv_analyser.get_value(e);
            value.mask(ml.bitfield_width);
            value.left_shift2(ml.bitfield_offset);
            u64 v = value.as_u64();
            l.bitfield_value |= v;
        } else {
            assert(0);  // TODO
        }
    } else {
        // NOTE value could be initListExpr for substructs/arrays
        l.gen.emitInit(e, ml.size);
        l.cur_offset = offset + ml.size;
    }
}

fn void BasicStructLayouter.flushBitfield(BasicStructLayouter* l) {
    l.gen.emitBitfield((u8)l.bitfield_base_size, l.bitfield_value);
    l.bitfield_value = 0;
    l.cur_offset += l.bitfield_base_size;
    l.bitfield_base_size = 0;
}

fn void BasicStructLayouter.finalize(BasicStructLayouter* l) {
    u32 pad = l.layout.size - l.cur_offset;
    if (l.bitfield_base_size) {
        pad -= l.bitfield_base_size;
        l.flushBitfield();
    }

    // emit final padding
    if (pad) l.gen.ctx.addInitZero(pad);
}


