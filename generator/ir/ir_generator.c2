/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_generator;

import ast local;
import array_init_sorter;
import component;
import console;
import constants;
import ctv_analyser;
import file_utils;
import ir local;
import ir_gen_locals local;
import ref_list_pool;
import source_mgr;
import string_buffer;
import string_pool;
import value_maplist;

import string;
import stdio;

type JumpScope struct {
    u32 break_block;    // 0 means invalid (assert)
    u32 continue_block;
}

type Generator struct {
    ir.Context* ctx;
    string_pool.Pool* names;
    value_maplist.List labels;

    JumpScope[constants.MaxScopes] scopes;
    u32 num_scopes;

    Locals locals;
    ref_list_pool.Pool ref_pool;

    string_buffer.Buf* name_buf;
    bool assert_generated;
    bool print;
    bool enable_asserts;
    u32 string_idx;     // for string literals
    u32 substruct_idx;  // for unnamed substructs/unions
    const char* target;
    const char* output_dir;
    source_mgr.SourceMgr* sm;
    FunctionDecl* cur_function;
}

fn void Generator.init(Generator* gen,
                       source_mgr.SourceMgr* sm,
                       const char* target,
                       const char* output_dir,
                       bool enable_asserts,
                       bool print) {
    string.memset(gen, 0, sizeof(Generator));
    gen.ctx = ir.create();
    gen.labels.init();
    gen.target = target;
    gen.output_dir = output_dir;
    gen.string_idx = 1; // starting at 1 looks nicer
    gen.locals.init();
    gen.ref_pool.init(4);
    gen.enable_asserts = enable_asserts;
    gen.print = print;
    gen.sm = sm;
    gen.name_buf = string_buffer.create(128, false, 0);
}

fn void Generator.free(Generator* gen) {
    gen.ref_pool.free();
    gen.labels.free();
    gen.ctx.free();
    gen.name_buf.free();
    gen.locals.free();
}

fn void Generator.enterScope(Generator* gen, u32 break_block, u32 continue_block) {
    assert(gen.num_scopes < elemsof(gen.scopes));
    JumpScope* s = &gen.scopes[gen.num_scopes];
    s.break_block = break_block;
    if (continue_block) {
        s.continue_block = continue_block;
    } else {
        // if if no continue block, take one from prev scope
        if (gen.num_scopes >= 1) s.continue_block = gen.scopes[gen.num_scopes-1].continue_block;
    }

    gen.num_scopes++;
}

fn void Generator.leaveScope(Generator* gen) {
    assert(gen.num_scopes > 0);
    gen.num_scopes--;
}

fn const char* Generator.createLocalName(Generator* gen, const Decl* d) {
    assert(gen.cur_function);
    // a in function mod.func -> mod_func.a
    string_buffer.Buf* out = gen.name_buf;
    out.clear();
    out.add(d.getModuleName());
    out.add1('_');
    out.add(gen.cur_function.asDecl().getName());
    out.add1('.');
    out.add(d.getName());
    return out.data();
}

fn const char* Generator.createSymbolName(Generator* gen, const Decl* d) {
    string_buffer.Buf* out = gen.name_buf;
    out.clear();

    if (d.isExternal()) {
        const char* cname = d.getCName();
        if (cname) {
            out.add(cname);
        } else {
            out.add(d.getName());
        }
    } else {
        if (d.isGlobal()) {
            out.add(d.getModuleName());
            out.add1('_');
            if (d.isFunction()) {
                FunctionDecl* fd = cast<FunctionDecl*>(d);
                ast.Ref* prefix = fd.getPrefix();
                if (prefix) {
                    out.add(ast.idx2name(prefix.name_idx));
                    out.add1('_');
                }
            } else if (d.isEnumConstant()) {
                QualType qt = d.getType();
                EnumType* et = cast<EnumType*>(qt.getType());
                out.add(et.getName());
                out.add1('_');
            }
        }
        out.add(d.getName());
    }
    return out.data();
}

fn SymbolId Generator.createSymbol(Generator* gen, Decl* d) {
    u32 gen_idx = d.getGenIdx();
    if (!gen_idx) {
        bool is_external = gen.isExternal(d);
        if (d.isFunction()) {
            gen_idx = gen.ctx.addFunction(gen.createSymbolName(d), is_external);
        } else {
            QualType qt = d.getType();
            gen_idx = gen.ctx.addGlobalVar(gen.createSymbolName(d), qt.getAlignment(), is_external);
        }
        d.setGenIdx(gen_idx);
    }
    return gen_idx;
}

fn const char* Generator.createStringVar(Generator* gen) {
    string_buffer.Buf* out = gen.name_buf;
    out.clear();
    out.print(".str%d", gen.string_idx);
    gen.string_idx++;
    return out.data();
}

const ir.Type[elemsof(BuiltinKind)] Ast_type2ir_type = {
    [BuiltinKind.Char] = ir.Type.I8,
    [BuiltinKind.Int8] = ir.Type.I8,
    [BuiltinKind.Int16] = ir.Type.I16,
    [BuiltinKind.Int32] = ir.Type.I32,
    [BuiltinKind.Int64] = ir.Type.I64,
    [BuiltinKind.UInt8] = ir.Type.U8,
    [BuiltinKind.UInt16] = ir.Type.U16,
    [BuiltinKind.UInt32] = ir.Type.U32,
    [BuiltinKind.UInt64] = ir.Type.U64,
    [BuiltinKind.Float32] = ir.Type.F32,
    [BuiltinKind.Float64] = ir.Type.F64,
    [BuiltinKind.ISize] = ir.Type.I64,  // TODO 32-bit
    [BuiltinKind.USize] = ir.Type.U64,  // TODO 32-bit
    [BuiltinKind.Bool] = ir.Type.I8,    // TODO ir.Type.I1?
    [BuiltinKind.Void] = ir.Type.None,
}

fn ir.Type builtin2irtype(BuiltinKind k) {
    return Ast_type2ir_type[k];
}

fn ir.Type Generator.type2irtype(Generator* gen, QualType qt) {
    QualType canon = qt.getCanonicalType();
    switch (canon.getKind()) {
    case Builtin:
        BuiltinType* bi = canon.getBuiltin();
        return builtin2irtype(bi.getKind());
    case Pointer:
        // TODO 32-bits
        return ir.Type.I64;
    case Array:
        // return base type
        ArrayType* at = canon.getArrayType();
        return gen.type2irtype(at.getElemType());
    case Struct:
        StructType* st = canon.getStructType();
        const StructTypeDecl* std = st.getDecl();
        u32 align = std.getAlignment();
        switch (align) {
        case 1:
            return ir.Type.I8;
        case 2:
            return ir.Type.I16;
        case 4:
            return ir.Type.I32;
        default:
            return ir.Type.I64;
        }
        break;
    case Enum:
        EnumType* et = canon.getEnum();
        return gen.type2irtype(et.getImplType());
    case Function:
        // TODO 32-bits
        return ir.Type.I64;
    case Alias:
        assert(0);
        break;
    case Module:
        assert(0);
        break;
    }
    return ir.Type.None;
}

fn void Generator.emitInit(Generator* gen, const Expr* e, u32 size) {
    if (e.isCtv()) {
        Value v = ctv_analyser.get_value(e);
        switch (size) {
        case 1:
            gen.ctx.addInitValueU8(v.as_u8());
            break;
        case 2:
            gen.ctx.addInitValueU16(v.as_u16());
            break;
        case 4:
            gen.ctx.addInitValueU32(v.as_u32());
            break;
        case 8:
            gen.ctx.addInitValueU64(v.as_u64());
            break;
        }
        return;
    }

    switch (e.getKind()) {
    case IntegerLiteral:
    case FloatLiteral:
    case BooleanLiteral:
    case CharLiteral:
        assert(0);  // should be CTV
        break;
    case StringLiteral:
        const StringLiteral* s = cast<StringLiteral*>(e);
        gen.ctx.addInitString(s.getText(), s.strlen());
        break;
    case Nil:
        assert(0);  // should be CTV
        break;
    case Identifier:
        const IdentifierExpr* i = cast<IdentifierExpr*>(e);
        Decl* d = i.getDecl();
        SymbolId sid = gen.createSymbol(d);
        gen.ctx.addInitSymbol(sid);
        break;
    case Type:
    case Call:
        e.dump();
        assert(0);  // should be CTV
        break;
    case InitList:
        const InitListExpr* ile = cast<InitListExpr*>(e);
        u32 num_values = ile.getNumValues();
        if (num_values == 0) {   // { }
            gen.ctx.addInitZero(size);
            break;
        }
        if (ile.isArray()) {
            gen.emitArrayInit(e);
        } else {
            gen.emitStructInit(e);
        }
        break;
    case FieldDesignatedInit:
    case ArrayDesignatedInit:
    case BinaryOperator:
        e.dump();
        assert(0);  // should be CTV
        break;
    case UnaryOperator:
        UnaryOperator* uo = cast<UnaryOperator*>(e);
        assert(uo.isAddrOf());
        gen.emitInit(uo.getInner(), size);
        break;
    case ConditionalOperator:
    case Builtin:
    case ArraySubscript:
        e.dump();
        assert(0);  // should be CTV
        break;
    case Member:
        // should be Symbol ref
        const MemberExpr* m = cast<MemberExpr*>(e);
        Decl* d = m.getFullDecl();
        SymbolId sid = gen.createSymbol(d);
        gen.ctx.addInitSymbol(sid);
        break;
    case Paren:
    case BitOffset:
        e.dump();
        assert(0);  // should be CTV
        break;
    case ExplicitCast:
        // ExplicitCast can be non-CTV:  .. = cast<void*>(&a);
        // just emit inner then
        const ExplicitCastExpr* ec = cast<ExplicitCastExpr*>(e);
        gen.emitInit(ec.getInner(), size);
        break;
    case ImplicitCast:
        const ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);
        gen.emitInit(ic.getInner(), size);
        break;
    case Range:
        assert(0);
        break;
    }
}

fn void Generator.emitStructInit(Generator* gen, const Expr* e) {
    const InitListExpr* ile = cast<InitListExpr*>(e);
    u32 num_values = ile.getNumValues();
    const Expr** values = ile.getValues2();

    QualType qt = e.getType();
    StructType* st = qt.getStructType();
    StructTypeDecl* std = st.getDecl();
    const u32 num_members = std.getNumMembers();
    Decl** members = std.getMembers();

    if (ile.hasDesignators()) {
        // TODO have a pool of these? (for sub-structs)
        FieldStructLayouter layouter;
        layouter.init(gen, std);
        for (u32 i=0; i<num_values; i++) {
            FieldDesignatedInitExpr* fdi = cast<FieldDesignatedInitExpr*>(values[i]);
            layouter.add(fdi.getMemberOffset(), fdi.getInit());
        }
        layouter.finalize();
    } else {
        BasicStructLayouter layouter;
        layouter.init(gen, std);
        for (u32 i=0; i<num_values; i++) layouter.add(i, values[i]);
        layouter.finalize();
    }
}

fn void on_zero(void* arg, u32 size) {
    Generator* gen = arg;
    gen.ctx.addInitZero(size);
}

fn void on_expr(void* arg, const Expr* e, u32 elem_size) {
    Generator* gen = arg;
    gen.emitInit(e, elem_size);
}

fn void Generator.emitArrayInit(Generator* gen, const Expr* e) {
    const InitListExpr* ile = cast<InitListExpr*>(e);
    u32 num_values = ile.getNumValues();
    // TODO store element_size / num-elements real, not just in inits) in ILE?
    QualType qt = e.getType();
    ArrayType* at = qt.getArrayType();
    u32 array_size = at.getSize();  // TODO use for un-initialized stuff
    QualType et = at.getElemType();
    u32 elem_size = et.getSize(false);

    if (ile.hasDesignators()) {
        // TODO handle sparse arrays
        array_init_sorter.Sorter sorter = array_init_sorter.create(num_values, array_size, elem_size);
        const Expr** values = ile.getValues2();
        for (u32 i=0; i<num_values; i++) {
            const Expr* ie = values[i];
            if (ie.isArrayDesignatedInit()) {
                const ArrayDesignatedInitExpr* ad = cast<ArrayDesignatedInitExpr*>(ie);
                const Expr* desig = ad.getDesignator();
                Value v = ctv_analyser.get_value(desig);
                sorter.addAt(v.as_u32(), ad.getInit());
            } else {
                sorter.add(ie);
            }
        }
        sorter.iterate(on_expr, on_zero, gen);
        sorter.free();

        // TODO sort in init_sorter
        // ref = gen.ctx.addInitArray(array_size, elem_size);  // all set to Zero-init
        // Hmm cannot use normal gen.ctx.addInitValueU32() ??

        // TODO create array_size values, set to zero, update?
        //assert(0); // TODO
    } else {
        const Expr** values = ile.getValues2();
        for (u32 i=0; i<num_values; i++) {
            gen.emitInit(values[i], elem_size);
        }
        u32 missing = array_size - num_values;
        if (missing) {
            gen.ctx.addInitZero(missing * elem_size);
        }
    }
}

fn bool Generator.isExternal(Generator* gen, const Decl* d) {
    // Note: always single build (fast build not supported yet)
    return d.isExported();
}

fn void Generator.emitFunction(Generator* gen, FunctionDecl* fd) {
    ir.Context* c = gen.ctx;

    gen.labels.clear();
    gen.locals.clear();
    Decl* d = cast<Decl*>(fd);
    gen.cur_function = fd;

    bool has_prefix = !d.isPublic() || (string.strcmp(d.getName(), "main") != 0);

    u32 gen_idx = d.getGenIdx();
    if (!gen_idx) {
        gen_idx = c.addFunction(gen.createSymbolName(d), gen.isExternal(d));
        d.setGenIdx(gen_idx);
    }

    // add params
    ir.Type rt = ir.Type.None;
    if (fd.hasReturn()) {
        rt = gen.type2irtype(fd.getRType());
        c.setFunctionReturnType(rt);
    } else {
        c.setFunctionReturnType(ir.Type.None);
    }

    c.startFunc(gen_idx);
    ir.BlockId body_blk = c.createBlock(BlockKind.FnStart);
    c.startBlock(body_blk);

    // Note: this also adds instructions
    u32 num_params = fd.getNumParams();
    VarDecl** params = fd.getParams();
    ir.Ref[constants.MaxCallArgs] param_refs;
    for (u32 i=0; i<num_params; i++) {
        VarDecl* v = params[i];
        ir.Type t2 = gen.type2irtype(v.asDecl().getType());
        gen.addLocalVar(v);
        c.addFuncArg(t2);
        param_refs[i].init(RefKind.Param, i+1);
        // TODO pass-by-value structs can be turned into pointer or 1-2 words
    }
    //if (d.isPublic()) out.add("export "); // TEMP not if single file, unless main

    // TODO add module name, except for main

    // generate a map for all locals, allocate stack slots. Also define 'local' locals
    gen.collectLocals(fd);
    //gen.locals.dump();

    // TODO need to know instr start
    //u32 instr_start = c.getInstrStart();
    // create stores for params
    for (u32 i=0; i<num_params; i++) {
        VarDecl* v = params[i];
        StackVar* var = gen.locals.find(v);
        c.addStoreInstr(var.ir_type, var.ref, param_refs[i]);
    }

    gen.emitStmt(cast<Stmt*>(fd.getBody()));

    if (!c.isBlockTerminated()) {
        c.addRet0Instr();
    }
    c.endBlock();
    c.endFunc();
}

fn void on_var_decl(void* arg, VarDecl* vd) {
    Generator* gen = arg;
    ir.Context* c = gen.ctx;

    Decl* d = cast<Decl*>(vd);
    if (!d.isUsed()) return;

    QualType qt = d.getType();
    u32 gen_idx = d.getGenIdx();
    if (!gen_idx) {
        gen_idx = gen.ctx.addGlobalVar(gen.createSymbolName(d), qt.getAlignment(), gen.isExternal(d));
        d.setGenIdx(gen_idx);
    }

    c.startGlobal(gen_idx);
    const Expr* ie = vd.getInit();
    u32 size = qt.getSize(false);
    if (ie) {
        gen.emitInit(ie, size);
    } else {
        c.addInitZero(size);
    }
    c.endGlobal();
}

fn void on_function_decl(void* arg, FunctionDecl* d) {
    if (!d.asDecl().isUsed()) return;
    Generator* gen = arg;
    gen.emitFunction(d);
}

fn void Generator.on_ast(void* arg, AST* a) {
    a.visitVarDecls(on_var_decl, arg);
    a.visitFunctions(on_function_decl, arg);
}

fn void Generator.on_module(void* arg, Module* m) {
    if (!m.isUsed()) return;

    Generator* gen = arg;

    m.visitASTs(Generator.on_ast, arg);
}

// TODO only pass main component
public fn void generate(const char* target,
                        const char* output_dir,
                        component.List* comps,
                        source_mgr.SourceMgr* sm,
                        bool enable_asserts,
                        bool print) {
    char[constants.Max_path] ir_dir;
    stdio.sprintf(ir_dir, "%s/ir", output_dir);
    i32 err = file_utils.create_directory(ir_dir);
    if (err) {
        console.error("cannot create directory %s: %s", ir_dir, string.strerror(err));
        return;
    }

    Generator gen;
    gen.init(sm, target, ir_dir, enable_asserts, print);

    // TODO: also need to generate inline functions from libs -> check body/not
    // We only need to generate the main component
    component.Component* mainComp = comps.getLast();
    mainComp.visitModules(Generator.on_module, &gen);

    //gen.ctx.dump();
    //if (gen.print) gen.ctx.dump();
    if (gen.print) gen.ctx.print();

    //gen.ctx.report();

    //gen.write(ir_dir, QBE_Filename);

    gen.free();
}

fn void Generator.collectLocals(Generator* gen, const FunctionDecl* fd) {
    VarDecl** fn_params = fd.getParams();
    u32 num_params = fd.getNumParams();
    gen.locals.skipSlots(num_params);
    // Q: dont assign slots here but in IrContext?

    //for (u32 i=0; i<num_params; i++) {
    //    gen.addLocalVar(fn_params[i]);
    //}
    // TODO handle varargs, how?

    gen.collectLocalVars(cast<Stmt*>(fd.getBody()));
}

fn void Generator.addLocalVar(Generator* gen, VarDecl* vd) {
    QualType qt = vd.asDecl().getType();
    const StructType* s = qt.getStructTypeOrNil();
    u32 width;
    u32 align;
    if (s) {
        const StructTypeDecl* std = s.getDecl();
        width = std.getSize();
        align = std.getAlignment();
    } else {
        width = qt.getAlignment();
        align = width;
    }

    // emit alloc (LocalSlot)
    u32 size = qt.getSize(false);
    // TODO filter duplicates (0-100?) Q: filter here or in Context?
    ir.Ref size_ref = gen.ctx.addIntegerConstant(size);
    ir.Ref slot = gen.ctx.addStackSlot(align, size_ref);
    // TODO dont pass type again, since doing duplicate work with above code (with+align)
    ir.Type ir_type = gen.type2irtype(qt);
    gen.locals.add(vd, width, align, size, slot, ir_type);
    // params may be unnamed
    const char* name = vd.asDecl().getName();
    if (name) gen.ctx.addComment(name);
}

fn void Generator.collectLocalVars(Generator* gen, Stmt* s) {
    switch (s.getKind()) {
    case If:
        const IfStmt* if_stmt = cast<IfStmt*>(s);
        gen.collectLocalVars(if_stmt.getCond());
        Stmt* then_stmt = if_stmt.getThen();
        if (then_stmt) gen.collectLocalVars(then_stmt);
        Stmt* else_stmt = if_stmt.getElse();
        if (else_stmt) gen.collectLocalVars(else_stmt);
        break;
    case While:
        const WhileStmt* while_stmt = cast<WhileStmt*>(s);
        gen.collectLocalVars(while_stmt.getCond());
        gen.collectLocalVars(while_stmt.getBody());
        break;
    case For:
        const ForStmt* for_stmt = cast<ForStmt*>(s);
        Stmt* init_stmt = for_stmt.getInit();
        if (init_stmt) gen.collectLocalVars(init_stmt);
        Stmt* body_stmt = for_stmt.getBody();
        if (body_stmt) gen.collectLocalVars(body_stmt);
        break;
    case Switch:
        SwitchStmt* sw = cast<SwitchStmt*>(s);
        u32 num_cases = sw.getNumCases();
        SwitchCase** cases = sw.getCases();
        for (u32 i=0; i<num_cases; i++) {
            SwitchCase* sc = cases[i];
            u32 num_stmts = sc.getNumStmts();
            Stmt** stmts = sc.getStmts();
            for (u32 j=0; j<num_stmts; j++) {
                gen.collectLocalVars(stmts[j]);
            }
        }
        break;
    case Label:
        LabelStmt* ls = cast<LabelStmt*>(s);
        gen.collectLocalVars(ls.getStmt());
        break;
    case Compound:
        CompoundStmt* c = cast<CompoundStmt*>(s);
        const u32 num_stmts = c.getCount();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<num_stmts; i++) {
            // Note: does not handle unreachable code
            gen.collectLocalVars(stmts[i]);
        }
        break;
    case Decl:
        const DeclStmt* ds = cast<DeclStmt*>(s);
        VarDecl* vd = ds.getDecl();
        if (vd.hasLocalQualifier()) {
            // TODO move to collectLocals?
            Decl* d = cast<Decl*>(vd);
            ir.Ref ref;
            gen.emitVarDecl(&ref, d);
            QualType qt = d.getType();
            u32 size = qt.getSize(false);

            const Expr* ie = vd.getInit();
            gen.ctx.startGlobal(ref.value);
            if (ie) {
                gen.emitInit(ie, size);
            } else {
                gen.ctx.addInitZero(size);
            }
            gen.ctx.endGlobal();
        } else {
            gen.addLocalVar(vd);
        }
        break;
    default:
        break;
    }
}

fn BlockId Generator.getLabelBlock(Generator* gen, u32 label_idx) {
    BlockId b_id = gen.labels.get(label_idx);
    if (!b_id) {
        b_id = gen.ctx.createBlock(BlockKind.Label);
        gen.labels.add(label_idx, b_id);
    }
    return b_id;
}

