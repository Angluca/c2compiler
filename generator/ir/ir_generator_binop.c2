/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_generator;

import ast local;
import ir local;

fn void Generator.emitBinaryOperator(Generator* gen, ir.Ref* result, const Expr* e) {
    const BinaryOperator* b = cast<BinaryOperator*>(e);

    switch (b.getOpcode()) {
    case Multiply:
    case Divide:
    case Remainder:
    case Add:
    case Subtract:
        break;
    case ShiftLeft:
    case ShiftRight:
        gen.emitShift(result, e);
        return;
    case LessThan:
    case GreaterThan:
    case LessEqual:
    case GreaterEqual:
    case Equal:
    case NotEqual:
        break;
    case And:
    case Xor:
    case Or:
        break;
    case LAnd:
        gen.emitLogicalAnd(result, e);
        return;
    case LOr:
        gen.emitLogicalOr(result, e);
        return;
    case Assign:
        ir.Ref src;
        gen.emitExpr(&src, b.getRHS());
        ir.Ref dest;
        gen.emitExpr(&dest, b.getLHS());
        // TODO get type (from either side, should be same by now)
        gen.ctx.addStoreInstr(ir.Type.I32, dest, src);
        return;
    case MulAssign:
    case DivAssign:
    case RemAssign:
    case AddAssign:
    case SubAssign:
    case ShlAssign:
    case ShrAssign:
    case AndAssign:
    case XorAssign:
    case OrAssign:
        gen.emitOpAssign(result, e);
        return;
    }

    // TODO use array with instructions (combine with signed/unsigned)
    InstrKind kind = InstrKind.None;
    switch (b.getOpcode()) {
    case Multiply:
        kind = InstrKind.Mul;
        break;
    case Divide:
        // TODO idiv/udiv/fdiv
        kind = InstrKind.IDiv;
        break;
    case Remainder:
        kind = InstrKind.Rem;
        break;
    case Add:
        // TODO or FAdd
        kind = InstrKind.Add;
        break;
    case Subtract:
        kind = InstrKind.Sub;
        break;
    case LessThan:
        kind = InstrKind.CmpLt;
        break;
    case GreaterThan:
        kind = InstrKind.CmpGt;
        break;
    case LessEqual:
        kind = InstrKind.CmpLe;
        break;
    case GreaterEqual:
        kind = InstrKind.CmpGe;
        break;
    case Equal:
        kind = InstrKind.CmpEq;
        break;
    case NotEqual:
        kind = InstrKind.CmpNe;
        break;
    case And:
        kind = InstrKind.And;
        break;
    case Xor:
        kind = InstrKind.Xor;
        break;
    case Or:
        kind = InstrKind.Or;
        break;
    default:
        assert(0);
        break;
    }
    assert(kind != InstrKind.None);

    ir.Ref left;
    gen.emitExpr(&left, b.getLHS());
    ir.Ref right;
    gen.emitExpr(&right, b.getRHS());

    *result = gen.ctx.addBinaryInstr(kind, left, right);
}

// 2 cases: as if/while/for condition or outside
// this is the outside case-> should return a result
fn void Generator.emitLogicalAnd(Generator* gen, ir.Ref* result, const Expr* e) {
    const BinaryOperator* b = cast<BinaryOperator*>(e);
    ir.Context* c = gen.ctx;

    // convert into number, need Phi instr
#if 0
    //gen.emitCond(b.getLHS(), and_true, false_blk);
    //gen.emitCond(b.getRHS(), true_blk, false_blk);

    BlockId and_cond = c.createBlock(BlockKind.AndCond);
    BlockId and_true = c.createBlock(BlockKind.AndTrue);
    BlockId and_join = c.createBlock(BlockKind.AndJoin);
    ir.Ref left;

    ir.Ref cond1 = gen.emitCondition(cast<Stmt*>(b.getLHS()));
    c.addJmpIfInstr(cond1, and_cond, and_join);
    c.endBlock();

    c.startBlock(and_cond);
    ir.Ref cond2 = gen.emitCondition(cast<Stmt*>(b.getRHS()));
    c.addJmpIfInstr(cond2, and_true, and_join);
    c.endBlock();

    c.startBlock(and_true);
    //gen.emitExpr(&right, b.getRHS());

    // TODO check for CTV
    // NOTE: need to convert either side to bool and branch if true (lazy evaluation)
    // InstrKind k = is_and ? InstrKind.LAnd : InstrKind.LOr;
    // *result = gen.ctx.addBinaryInstr(k, left, right);
#endif
}

fn void Generator.emitLogicalOr(Generator* gen, ir.Ref* result, const Expr* e) {
    const BinaryOperator* b = cast<BinaryOperator*>(e);

    //ir.Ref left;
    //gen.emitExpr(&left, b.getLHS());
    // TODO
}

fn void Generator.emitShift(Generator* gen, ir.Ref* result, const Expr* e) {
    const BinaryOperator* b = cast<BinaryOperator*>(e);
    InstrKind k;
    if (b.getOpcode() == BinaryOpcode.ShiftLeft) {
        k = InstrKind.Shl;
    } else {
        //QualType qt = e.getType();
        //if (qt.isUnsigned()) instr = "shr";
        //else instr = "sar";
        k = InstrKind.Shr;
    }

    ir.Ref left;
    gen.emitExpr(&left, b.getLHS());
    ir.Ref right;
    gen.emitExpr(&right, b.getRHS());

    *result = gen.ctx.addBinaryInstr(k, left, right);
}

fn void Generator.emitOpAssign(Generator* gen, ir.Ref* result, const Expr* e) {
    const BinaryOperator* b = cast<BinaryOperator*>(e);

    // TODO put in global array (also use in Generic)
    // Compare: size <=4 -> w variant, else l variant
    //              signed:   csltw / csltl
    //              unsigned: cultw / cultl
    //              float:    clts / cltd
    // same for greater, etc
    InstrKind k = InstrKind.None;
    switch (b.getOpcode()) {
    case MulAssign:
        k = InstrKind.Mul;
        break;
    case DivAssign:
        k = InstrKind.Div;
        break;
    case RemAssign:
        k = InstrKind.Rem;
        break;
    case AddAssign:
        k = InstrKind.Add;
        break;
    case SubAssign:
        k = InstrKind.Sub;
        break;
    case ShlAssign:
        k = InstrKind.Shl;
        break;
    case ShrAssign:
        k = InstrKind.Shr;
        break;
    case AndAssign:
        k = InstrKind.And;
        break;
    case XorAssign:
        k = InstrKind.Xor;
        break;
    case OrAssign:
        k = InstrKind.Or;
        break;
    default:
        assert(0);
        return;
    }
    assert(k != InstrKind.None);

    ir.Ref left;
    gen.emitExpr(&left, b.getLHS());

    // emit as lvalue (=load)
    ir.Type t = ir.Type.I32; // TODO get type from Expr
    ir.Ref left_val = gen.ctx.addLoadInstr(t, left);

    ir.Ref right;
    gen.emitExpr(&right, b.getRHS());

    right = gen.ctx.addBinaryInstr(k, left_val, right);
    gen.ctx.addStoreInstr(t, left, right);
}

