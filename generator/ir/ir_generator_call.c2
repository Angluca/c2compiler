/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_generator;

import ast local;
import ir local;
import ir_context;
import ref_list local;

fn void Generator.emitCallExpr(Generator* gen, ir.Ref* result, const Expr* e) {
    CallExpr* call = cast<CallExpr*>(e);
    ir_context.Context* c = gen.ctx;

    u32 num_args = call.getNumArgs();
    Expr** args = call.getArgs();

    QualType qt = e.getType();
    bool has_result = !qt.isVoid();
    bool is_tf = call.isTypeFunc();

    RefList arg_refs.init();

    ir.Ref name_ref;
    if (is_tf) {
        Expr* func = call.getFunc();

        // MemberExpr is marked as TF, so emitMemberExpr should only emit base part
        ir.Ref ref;
        gen.emitMemberExpr(&ref, func);
        arg_refs.add(ref);

        const MemberExpr* m = cast<MemberExpr*>(func);
        gen.emitSymbol(&name_ref, m.getFullDecl());
    } else {
        gen.emitExpr(&name_ref, call.getFunc());
    }

    for (u32 i=0; i<num_args; i++) {
        ir.Ref ref;
        gen.emitExpr(&ref, args[i]);
        arg_refs.add(ref);
    }

    *result = c.addCallInstr(name_ref, arg_refs.get(), arg_refs.getCount(), has_result, call.isNoreturn());
    arg_refs.free();
}

