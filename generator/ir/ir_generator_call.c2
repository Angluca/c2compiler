/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir_generator;

import ast local;
import ir local;

fn void Generator.emitCallExpr(Generator* gen, ir.Ref* result, const Expr* e) {
    CallExpr* call = cast<CallExpr*>(e);
    Context* c = gen.ctx;

    u32 num_args = call.getNumArgs();
    Expr** args = call.getArgs();

    QualType qt = e.getType();
    bool has_result = !qt.isVoid();

    ir.Ref args_ref;
    // TODO auto args, struct/enum-functions, etc
    if (num_args == 0) {
        args_ref.init(RefKind.None, 0);
    } else {
        args_ref.init(RefKind.RefList, c.getRefsCount());
    }

#if 0
    bool is_tf = call.isTypeFunc();
    if (is_tf) {
        // TODO not for static type funcs?
        ir.Ref ref;
        // MemberExpr is marked as TF, so emitMemberExpr should be able to do it
        gen.emitMemberExpr(&ref, call.getFunc());
        // TODO Addr/Deref if needed -> m.getConversion()?
        // TODO add as first arg
        c.addCallArg(ref);
    }
#endif

    for (u32 i=0; i<num_args; i++) {
        ir.Ref ref;
        // TODO conversions?
        gen.emitExpr(&ref, args[i]);
        c.addCallArg(ref);
    }
    // Terminate with Ref.Unspecified
    if (num_args) {
        ir.Ref ref;
        ref.init(RefKind.None, 0);
        c.addCallArg(ref);
    }

    ir.Ref name_ref;
    gen.emitExpr(&name_ref, call.getFunc());
    *result = c.addCallInstr(name_ref, args_ref, has_result);
}

