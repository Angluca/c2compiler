/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ref_list_pool;

import ir;
import linked_list;

import stdlib;

type Elem struct {
    ir.RefList ref;
    linked_list.Element list;
}

fn Elem* Elem.create() {
    Elem* e = stdlib.malloc(sizeof(Elem));
    e.ref.init(4);
    e.list.init();
    return e;
}

fn void Elem.free(Elem* e) {
    e.ref.free();
    stdlib.free(e);
}

// Note: never copy Pool, since Elems have a pointer to Pool.list!!
public type Pool struct {
    linked_list.Element list;   // of Elem
}

public fn void Pool.init(Pool* p, u32 initial) {
    p.list.init();
    for (u32 i=0; i<initial; i++) {
        Elem* e = Elem.create();
        p.list.addTail(&e.list);
    }
}

public fn void Pool.free(Pool* p) {
    linked_list.Element* cur = p.list.next;
    while (cur != &p.list) {
        Elem* e = to_container(Elem, list, cur);
        cur = cur.next;
        e.free();
    }
}

public fn ir.RefList* Pool.get(Pool* p) {
    Elem* e;
    if (p.list.isEmpty()) {
        e = Elem.create();
    } else {
        linked_list.Element* head = p.list.popFront();
        e = to_container(Elem, list, head);
        e.ref.clear();
    }
    return &e.ref;
}

public fn void Pool.put(Pool* p, ir.RefList* l) {
    Elem* e = to_container(Elem, ref, l);
    p.list.addFront(&e.list);
}

