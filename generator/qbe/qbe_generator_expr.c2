/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module qbe_generator;

import c2;
import ast local;
import constants;
import ctv_analyser;
import qbe local;
import string_buffer;

import stdio local;
import string local;

// either holds %.12 or constant 123, or global name $test_function1
type ExprRef struct {
    char[80] ref;
}

fn void Generator.createString(Generator* gen, ExprRef* result, const char* text) {
    stdio.sprintf(result.ref, "$string.%d", gen.string_idx);
    gen.string_idx++;
    gen.globals.print("data %s = align 1 { b \"%s\\000\" }\n", result.ref, text);
}

fn void Generator.emitExpr(Generator* gen, ExprRef* result, const Expr* e) {
    result.ref[0] = 0;  // sanity

    if (e.isCtv()) {
        Value v = ctv_analyser.get_value(e);
        // TODO negative values (seems as 64-bit unsigned)
        sprintf(result.ref, "%s", v.str());
        return;
    }

    string_buffer.Buf* out = gen.out;
    // Note: not all expr here are CTV, mainly ArrayToPointerDecay or Arrays
    switch (e.getKind()) {
    case IntegerLiteral:
    case FloatLiteral:
    case BooleanLiteral:
    case CharLiteral:
        assert(0);  // should be handled by CTV above
        break;
    case StringLiteral:
        // TODO check if already generated
        StringLiteral* s = cast<StringLiteral*>(e);
        gen.createString(result, s.getText());
        break;
    case Nil:
        out.add1('0');
        break;
    case Identifier:
        gen.emitIdentifier(result, e);
        break;
    case Type:
        assert(0);
        break;
    case Call:
        CallExpr* ce = cast<CallExpr*>(e);
        // TODO add implicit args etc
        u32 num_args = ce.getNumArgs();
        Expr** args = ce.getArgs();
        // for printf("hello") -> %.5 =w call $printf(l $.Lstring.6)
        // TODO if it has a return
        ExprRef func;
        gen.emitExpr(&func, ce.getFunc());

        ExprRef[constants.MaxCallArgs] arg_refs;
        for (u32 a=0; a<num_args; a++) {
            const Expr* arg = args[a];
            gen.emitExpr(&arg_refs[a], arg);
        }
        QualType qt = e.getType();
        out.add1('\t');
        if (!qt.isVoid()) {
            gen.createTemp(result.ref);
            out.print("%s =w ", result.ref);
        }
        out.print("call %s(", func.ref);
        for (u32 a=0; a<num_args; a++) {
            if (a != 0) out.add(", ");
            out.print("l %s", arg_refs[a].ref);    // TEMP, always 'l' TODO use size of function-decl
        }
        out.add(")\n");

        break;
    case InitList:
    case FieldDesignatedInit:
    case ArrayDesignatedInit:
        assert(0);
        break;
    case BinaryOperator:
        gen.emitBinaryOperator(result, e);
        break;
    case UnaryOperator:
        gen.emitUnaryOperator(result, e);
        break;
    case ConditionalOperator:
        assert(0); // TODO
        break;
    case Builtin:
        // already done since CTV
        assert(0);
        break;
    case ArraySubscript:
        const ArraySubscriptExpr* a = cast<ArraySubscriptExpr*>(e);
        Expr* base = a.getBase();
        Expr* index = a.getIndex();
        QualType qt = base.getType();
        u32 base_size = qt.getSize(true);

        if (index.isCtv()) {
            // offset = value * base_size;
            Value v = ctv_analyser.get_value(index);
            u32 offset = v.as_u32() * base_size;

            ExprRef base_ref;
            gen.emitExpr(&base_ref, base);

            // %x = add %base, offset
            gen.createTemp(result.ref);
            out.print("\t%s =l add %s, %d\n", result.ref, base_ref.ref, offset);
        } else {
            ExprRef idx_ref;
            gen.emitExpr(&idx_ref, index);

            // %x = mul %index, base_size
            ExprRef tmp;
            gen.createTemp(tmp.ref);
            out.print("\t%s =l mul %d, %s\n", tmp.ref, base_size, idx_ref.ref);

            ExprRef base_ref;
            gen.emitExpr(&base_ref, base);

            // %y = add %base, %x
            gen.createTemp(result.ref);
            out.print("\t%s =l add %s, %s\n", result.ref, base_ref.ref, tmp.ref);
        }
        break;
    case Member:
        gen.emitMemberExpr(result, e);
        break;
    case Paren:
        ParenExpr* p = cast<ParenExpr*>(e);
        gen.emitExpr(result, p.getInner());
        break;
    case BitOffset:
        assert(0); // TODO
        // TODO
        break;
    case ExplicitCast:
        assert(0); // TODO
        // TODO
        break;
    case ImplicitCast:
        ImplicitCastExpr* ic = cast<ImplicitCastExpr*>(e);
        switch (ic.getKind()) {
        case ArrayToPointerDecay:
            // just ignore, pass inner
            gen.emitExpr(result, ic.getInner());
            break;
        case LValueToRValue:
            // turn into load
            ExprRef res;
            gen.emitExpr(&res, ic.getInner());
            gen.createTemp(result.ref);
            // TODO could also be =l loadl
            out.print("\t%s =w loadw %s\n", result.ref, res.ref);
            break;
        case PointerToBoolean:
            assert(0);
            break;
        case PointerToInteger:
            assert(0);
            break;
        case IntegralCast:
            stdio.printf("WARNING: IntegralCast (skipping for now)\n");
            gen.emitExpr(result, ic.getInner());
            break;
        case BitCast:
            assert(0);
            break;
        }
        break;
    }
}

fn void Generator.emitMemberExpr(Generator* gen, ExprRef* result, const Expr* e) {
    string_buffer.Buf* out = gen.out;
    const MemberExpr* m = cast<MemberExpr*>(e);
    IdentifierKind kind = m.getKind();

    if (kind == IdentifierKind.Var || kind == IdentifierKind.Function) {
        assert(!m.hasExpr());
        Decl* d = m.getFullDecl();
        getGlobalName(result.ref, d);
        return;
    }

    assert(kind == IdentifierKind.StructMember);

    // base
    ExprRef base_ref;
    QualType base_type;
    if (m.hasExpr()) {
        const Expr* base = m.getExprBase();
        gen.emitExpr(&base_ref, base);
        base_type = base.getType();
    } else {
        const Decl* base = m.getDecl(0);
        assert(base.isVarDecl());
        gen.emitVarDecl(&base_ref, base);
        base_type = base.getType();
    }

    // member
    const StructType* st = base_type.getStructType();
    const StructTypeDecl* std = st.getDecl();

    Decl* d = m.getFullDecl();
    // NOTE: dont need member, but this function returns offset
    u32 offset = 0;
    //Decl* dd = std.findMember(d.getNameIdx(), &offset);

    gen.createTemp(result.ref);
    out.print("\t%s =l add %s, %d\n", result.ref, base_ref.ref, offset);
}

fn void Generator.emitIdentifier(Generator* gen, ExprRef* result, const Expr* e) {
    IdentifierExpr* i = cast<IdentifierExpr*>(e);
    const Decl* d = i.getDecl();

    switch (i.getKind()) {
    case Unresolved:
    case Module:
        assert(0);
        break;
    case Function:
        getGlobalName(result.ref, d);
        break;
    case Type:
        assert(0);
        break;
    case Var:
        gen.emitVarDecl(result, d);
        break;
    case EnumConstant:
        assert(0); // TODO
        break;
    case StructMember:
    case Label:
        assert(0);
        break;
    }
}

fn void Generator.emitVarDecl(Generator* gen, ExprRef* result, const Decl* d) {
    const VarDecl* vd = cast<VarDecl*>(d);
    if (vd.isGlobal()) {
        getGlobalName(result.ref, d);
    } else if (vd.hasLocalQualifier()) {
        // TODO fix
        string_buffer.Buf* tmp = string_buffer.create(128, false, 0);
        addGlobalName(tmp, cast<Decl*>(gen.cur_function));
        tmp.add1('.');
        tmp.add(d.getName());
        strcpy(result.ref, tmp.data());
        tmp.free();
    } else if (vd.isLocal() || vd.isParameter()) {
        Var* var = gen.locals.find(vd);
        assert(var);
        sprintf(result.ref, "%%.%d", var.slot);
    } else {
        assert(0);
    }
}
fn void Generator.emitUnaryOperator(Generator* gen, ExprRef* result, const Expr* e) {
    string_buffer.Buf* out = gen.out;
    const UnaryOperator* uo = cast<UnaryOperator*>(e);
    switch (uo.getOpcode()) {
    case PostInc:
    case PostDec:
        // NOTE: Pre/PostDecr expr dont have an LValueToRValue
        // TODO what if (*cp)++ ?
        ExprRef inner;
        gen.emitExpr(&inner, uo.getInner());
        // %.x =w loadw %d
        gen.createTemp(result.ref);
        out.print("\t%s =w loadw %s\n", result.ref, inner.ref);
        // %.y =w add/sub %x, 1
        ExprRef tmp2;
        gen.createTemp(tmp2.ref);
        const char* instr = uo.getOpcode() == UnaryOpcode.PostInc ? "add" : "sub";
        out.print("\t%s =w %s %s, 1\n", tmp2.ref, instr, result.ref);
        // storew %d, %.y
        out.print("\tstorew %s, %s\n", tmp2.ref, inner.ref);
        break;
    case PreInc:
    case PreDec:
        // NOTE: Pre/PostDecr expr dont have an LValueToRValue
        // TODO what if (*cp)++ ?
        ExprRef inner;
        gen.emitExpr(&inner, uo.getInner());
        // %.x =w loadw %d
        ExprRef tmp1;
        gen.createTemp(tmp1.ref);
        out.print("\t%s =w loadw %s\n", tmp1.ref, inner.ref);
        // %.y =w add/sub %x, 1
        gen.createTemp(result.ref);
        const char* instr = uo.getOpcode() == UnaryOpcode.PreInc ? "add" : "sub";
        out.print("\t%s =w %s %s, 1\n", result.ref, instr, tmp1.ref);
        // storew %d, %.y
        out.print("\tstorew %s, %s\n", result.ref, inner.ref);
        break;
    case AddrOf:
    case Deref:
        // Note: deref has LValueToRValue to creates load, voila
        gen.emitExpr(result, uo.getInner());
        break;
    case Minus:
        // QBE has no signed, emit unsigned variant
        assert(e.isCtc());
        Value v = ctv_analyser.get_value(e);
        //v.mask(32);
        // TEMP now only 32-bit
        //i32 s = cast<i32>(v.svalue);
        //printf("Value %d  %d  %d\n", v.svalue, v.uvalue, cast<u32>(s));
        //out.print("%d", cast<u32>(s));
        out.print("%d", v.as_u32());
        break;
    case Not:
        ExprRef inner;
        gen.emitExpr(&inner, uo.getInner());
        gen.createTemp(result.ref);
        // %x =w xor %18, 18446744073709551615
        out.print("\t%s =w xor %s, %d\n", result.ref, inner.ref, c2.max_u64);
        break;
    case LNot:
        ExprRef inner;
        gen.emitExpr(&inner, uo.getInner());
        gen.createTemp(result.ref);
        // %x =w ceqw %16, 0
        out.print("\t%s =w ceqw %s, 0\n", result.ref, inner.ref);
        break;
    }
}

fn void Generator.emitBinaryOperator(Generator* gen, ExprRef* result, const Expr* e) {
    string_buffer.Buf* out = gen.out;
    const BinaryOperator* b = cast<BinaryOperator*>(e);
    switch (b.getOpcode()) {
    case Multiply:
    case Divide:
    case Remainder:
    case Add:
    case Subtract:
        break;
    case ShiftLeft:
    case ShiftRight:
        gen.emitShift(result, e);
        return;
    case LessThan:
    case GreaterThan:
    case LessEqual:
    case GreaterEqual:
    case Equal:
    case NotEqual:
        break;
    case And:
    case Xor:
    case Or:
        break;
    case LAnd:
    case LOr:
        gen.emitLogicalOp(result, e, b.getOpcode() == BinaryOpcode.LAnd);
        return;
    case Assign:
        ExprRef src;
        gen.emitExpr(&src, b.getRHS());
        ExprRef dest;
        gen.emitExpr(&dest, b.getLHS());
        out.print("\tstorew %s, %s\n", src.ref, dest.ref);
        return;
    case MulAssign:
    case DivAssign:
    case RemAssign:
    case AddAssign:
    case SubAssign:
    case ShlAssign:
    case ShrAssign:
    case AndAssign:
    case XorAssign:
    case OrAssign:
        gen.emitOpAssign(result, e);
        return;
    }

    // TODO use array with instructions (combine with signed/unsigned)
    const char* instr;
    switch (b.getOpcode()) {
    case Multiply:
        instr = "mul";
        break;
    case Divide:
        // TODO udiv
        instr = "div";
        break;
    case Remainder:
        // TODO urem
        instr = "rem";
        break;
    case Add:
        instr = "add";
        break;
    case Subtract:
        instr = "sub";
        break;
    case LessThan:
        instr = "csltw";
        break;
    case GreaterThan:
        instr = "csgtw";
        break;
    case LessEqual:
        instr = "cslew";
        break;
    case GreaterEqual:
        instr = "csgew";
        break;
    case Equal:
        instr = "ceqw";
        break;
    case NotEqual:
        instr = "cnew";
        break;
    case And:
        instr = "and";
        break;
    case Xor:
        instr = "xor";
        break;
    case Or:
        instr = "or";
        break;
    default:
        assert(0);
        break;
    }

    ExprRef left;
    gen.emitExpr(&left, b.getLHS());
    ExprRef right;
    gen.emitExpr(&right, b.getRHS());

    gen.createTemp(result.ref);
    out.print("\t%s =w %s %s, %s\n", result.ref, instr, left.ref, right.ref);
}

fn void Generator.emitOpAssign(Generator* gen, ExprRef* result, const Expr* e) {
    string_buffer.Buf* out = gen.out;
    const BinaryOperator* b = cast<BinaryOperator*>(e);

    // TODO put in global array (also use in Generic)
    // Compare: size <=4 -> w variant, else l variant
    //              signed:   csltw / csltl
    //              unsigned: cultw / cultl
    //              float:    clts / cltd
    // same for greater, etc
    const char* instr;
    switch (b.getOpcode()) {
    case MulAssign:
        instr = "mul";
        break;
    case DivAssign:
        // udiv
        instr = "div";
        break;
    case RemAssign:
        // urem
        instr = "rem";
        break;
    case AddAssign:
        instr = "and";
        break;
    case SubAssign:
        instr = "sub";
        break;
    case ShlAssign:
        instr = "shl";
        break;
    case ShrAssign:
        // TODO sar/shr
        instr = "shr";
        break;
    case AndAssign:
        instr = "and";
        break;
    case XorAssign:
        instr = "xor";
        break;
    case OrAssign:
        instr = "or";
        break;
    default:
        assert(0);
        return;
    }
    const Expr* lhs = b.getLHS();
    ExprRef left;
    gen.emitExpr(&left, lhs);
    ExprRef right;
    gen.emitExpr(&right, b.getRHS());

    // Note: to LValueToRValue is done for these operations, do load here
    ExprRef tmp1;
    gen.createTemp(tmp1.ref);
    out.print("\t%s =w loadw %s\n", tmp1.ref, left.ref);
    gen.createTemp(result.ref);
    out.print("\t%s =w %s %s, %s\n", result.ref, instr, tmp1.ref, right.ref);
    out.print("\tstorew %s, %s\n", result.ref, left.ref);
}

fn void Generator.emitLogicalOp(Generator* gen, ExprRef* result, const Expr* e, bool is_and) {
    // Note: a && b && c etc are coalesced at emitCondition()
    string_buffer.Buf* out = gen.out;
    const BinaryOperator* b = cast<BinaryOperator*>(e);
    // TODO combine and/or or put in separate functions?

    // a && b -> generate a, compare, on false out
    // AND a && b && c -> dont emit a && b  and later && c, just coalesce (Clang -O0 also does this)
    // -> need to check at higher level, not here
}

fn void Generator.emitShift(Generator* gen, ExprRef* result, const Expr* e) {
    string_buffer.Buf* out = gen.out;
    const BinaryOperator* b = cast<BinaryOperator*>(e);
    const char* instr;
    if (b.getOpcode() == BinaryOpcode.ShiftLeft) {
        instr = "shl";
    } else {
        QualType qt = e.getType();
        if (qt.isUnsigned()) instr = "shr";
        else instr = "sar";
    }

    ExprRef left;
    gen.emitExpr(&left, b.getLHS());
    ExprRef right;
    gen.emitExpr(&right, b.getRHS());

    gen.createTemp(result.ref);
    out.print("\t%s =w %s %s, %s\n", result.ref, instr, left.ref, right.ref);
}

