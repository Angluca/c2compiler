/* Copyright 2022-2024 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module qbe_generator;

import ast local;
import component;
import console;
import constants;
import string_buffer;
import ctv_analyser;
import process_utils;
import file_utils;
import linked_list;

import string;
import stdlib;
import stdio local;

fn bool Generator.emitStmt(Generator* gen, const Stmt* s) {
    string_buffer.Buf* out = gen.out;
    switch (s.getKind()) {
    case Return:
        const ReturnStmt* r = cast<ReturnStmt*>(s);
        const Expr* retval = r.getValue();
        if (retval) {
            ExprRef res;
            gen.emitExpr(&res, retval);
            out.print("\tret %s", res.ref);
        } else {
            out.add("\tret");
        }
        out.newline();
        gen.block_terminated = true;
        return false;
    case Expr:
        ExprRef dontcare;
        gen.emitExpr(&dontcare, cast<Expr*>(s));
        break;
    case If:
        gen.emitIfStmt(s);
        break;
    case While:
        gen.emitWhileStmt(s);
        break;
    case Break:
        assert(gen.num_scopes);
        out.print("\tjmp %s\n", gen.scopes[gen.num_scopes-1].break_block);
        gen.block_terminated = true;
        return false;
    case Continue:
        assert(gen.num_scopes);
        out.print("\tjmp %s\n", gen.scopes[gen.num_scopes-1].continue_block);
        gen.block_terminated = true;
        return false;
    case Compound:
        CompoundStmt* c = cast<CompoundStmt*>(s);
        const u32 num_stmts = c.getCount();
        Stmt** stmts = c.getStmts();
        for (u32 i=0; i<num_stmts; i++) {
            bool more = gen.emitStmt(stmts[i]);
            if (!more) break;
        }
        break;
    case Decl:
        const DeclStmt* ds = cast<DeclStmt*>(s);
        VarDecl* vd = ds.getDecl();
        const Expr* ie = vd.getInit();
        if (ie) {
            Var* var = gen.locals.find(vd);
            assert(var);
            ExprRef res;
            gen.emitExpr(&res, ie);
            QualType qt = vd.asDecl().getType();
            out.print("\tstore%c %s, %%.%d\n", align2store(qt.getAlignment()), res.ref, var.slot);
        }
        break;
    default:
        s.dump();
        assert(0); // TODO
        break;
    }
    return true;
}

fn void Generator.emitCondition(Generator* gen, ExprRef* result, const Stmt* s) {
    assert(s.isExpr()); // for now
    const Expr* e = cast<Expr*>(s);

    // TODO coalesce a && b && c   and a || b || c
    gen.emitExpr(result, e);
}

fn void Generator.emitIfStmt(Generator* gen, const Stmt* s) {
    string_buffer.Buf* out = gen.out;
    const IfStmt* if_stmt = cast<IfStmt*>(s);
    const Stmt* cond = if_stmt.getCond();
    const Stmt* then_stmt = if_stmt.getThen();
    const Stmt* else_stmt = if_stmt.getElse();

    // generate condition, could be Decl: Foo* f = getFoo() or something
    assert(cond.isExpr()); // TODO handle if (Decl* d = ..) ..

    // TODO extract to function (also used in While, Do and For
    Expr* e = cast<Expr*>(cond);
    if (e.isCtv()) {
        Value v = ctv_analyser.get_value(e);
        if (v.uvalue == 0) {
            if (else_stmt) gen.emitStmt(else_stmt);
        } else {
            gen.emitStmt(then_stmt);
        }
        return;
    }

    ExprRef res;
    gen.emitCondition(&res, cond);

    char[32] then_blk;
    char[32] else_blk;
    char[32] join_blk;
    sprintf(then_blk, "@if_true.%d", gen.getNewBlockIndex());
    sprintf(join_blk, "@if_join.%d", gen.getNewBlockIndex());

    if (else_stmt) {
        sprintf(else_blk, "@if_false.%d", gen.getNewBlockIndex());
        out.print("\tjnz %s, %s, %s\n", res.ref, then_blk, else_blk);
    } else {
        out.print("\tjnz %s, %s, %s\n", res.ref, then_blk, join_blk);
    }
    gen.block_terminated = true;

    // then-block
    gen.startBlock(then_blk, then_blk);
    gen.emitStmt(then_stmt);
    if (!gen.block_terminated) {
        out.print("\tjmp %s\n", join_blk);
        gen.block_terminated = true;
    }

    // optional else-block
    if (else_stmt) {
        gen.startBlock(else_blk, else_blk);
        gen.emitStmt(else_stmt);
        // NOTE: no jump needed, but insert anyways (good practice?) next block is join
        //if (!gen.block_terminated) {
        //    out.print("\tjmp %s\n", join_blk);
        //    gen.block_terminated = true;
        //}
    }
    // join block
    gen.startBlock(join_blk, join_blk);
}

fn void Generator.emitWhileStmt(Generator* gen, const Stmt* s) {
    string_buffer.Buf* out = gen.out;
    const WhileStmt* w = cast<WhileStmt*>(s);

    // TODO check if CtvCondition, then skip condition/body
    char[32] cond_blk;
    char[32] body_blk;
    char[32] join_blk;
    sprintf(cond_blk, "@while_cond.%d", gen.getNewBlockIndex());
    sprintf(body_blk, "@while_body.%d", gen.getNewBlockIndex());
    sprintf(join_blk, "@while_join.%d", gen.getNewBlockIndex());

    // cond
    gen.startBlock(cond_blk, cond_blk);
    ExprRef res;
    gen.emitCondition(&res, w.getCond());
    if (!gen.block_terminated) {
        out.print("\tjnz %s, %s, %s\n", res.ref, body_blk, join_blk);
        gen.block_terminated = true;
    }

    // body
    gen.startBlock(body_blk, body_blk);
    gen.pushScope(join_blk, cond_blk);
    gen.emitStmt(w.getBody());
    gen.popScope();
    if (!gen.block_terminated) {
        out.print("\tjmp %s\n", cond_blk);
        gen.block_terminated = true;
    }

    // join
    gen.startBlock(join_blk, join_blk);
}

