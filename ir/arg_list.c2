/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import stdlib;
import string;

public type ArgId u32;

public type ArgList struct {
    u32 count;
    u32 capacity;
    u8* data;
}

public fn void ArgList.init(ArgList* l, u32 initial) {
    l.count = 0;
    l.resize(initial);
}

public fn void ArgList.free(ArgList* l) {
    stdlib.free(l.data);
}

public fn ArgId ArgList.add(ArgList* l, Type t) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);
    l.data[l.count] = t;
    ArgId id = l.count;
    l.count++;
    return id;
}

public fn Type* ArgList.getFrom(const ArgList* l, u32 idx) {
    return cast<Type*>(&l.data[idx]);
}

fn void ArgList.resize(ArgList* l, u32 cap) {
    l.capacity = cap;
    u8* data2 = stdlib.malloc(l.capacity * sizeof(u8));
    if (l.data) {
        string.memcpy(data2, l.data, l.count * sizeof(u8));
        stdlib.free(l.data);
    }
    l.data = data2;
}


