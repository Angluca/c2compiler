/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import stdlib;

type FunctionInfo struct {
    BlockList blocks;
    InstrList instructions;
    RefList refs;   // for call arguments
    // TODO args
}
static_assert(48, sizeof(FunctionInfo));

fn FunctionInfo* FunctionInfo.create(u32 num_blks, u32 num_instr, u32 num_refs) {
    FunctionInfo* fi = stdlib.malloc(sizeof(FunctionInfo));
    fi.blocks.init(num_blks);
    fi.instructions.init(num_instr);
    fi.refs.init(num_refs);
    return fi;
}

fn void FunctionInfo.free(FunctionInfo* fi) {
    fi.refs.free();
    fi.instructions.free();
    fi.blocks.free();
    stdlib.free(fi);
}

fn void FunctionInfo.clear(FunctionInfo* fi) {
    fi.blocks.clear();
    fi.instructions.clear();
    fi.refs.clear();
}

fn u32 FunctionInfo.getUsedBlkCount(const FunctionInfo* fi) {
    return fi.blocks.getUsedCount();
}



type Function struct {
    u32 external : 1;
    // TODO linkage
    GlobalId gid;
    // TODO remove pointer?, just inline? (can replace content easily, swap pointers on blocks, instructions)
    FunctionInfo* info;
    // TODO remove these (store whole list in info)
    Index args;
}
static_assert(24, sizeof(Function));

fn void Function.init(Function* f, GlobalId gid, bool external) {
    f.args.start = 0;
    f.args.count = 0;
    f.gid = gid;
    f.external = external;
    f.info = nil;
}

fn void Function.free(Function* f) {
    if (f.info) f.info.free();
}

fn void Function.setInfo(Function* f, FunctionInfo* info) {
    f.info = info;
}

fn void Function.setArgs(Function* f, u32 start, u32 count) {
    f.args.start = start;
    f.args.count = count;
}

/*
fn Index Function.getArgs(const Function* f) {
    return f.args;
}
*/

fn u32 Function.getGid(const Function* f) {
    return f.gid;
}

fn bool Function.isExternal(const Function* f) {
    return f.external;
}

