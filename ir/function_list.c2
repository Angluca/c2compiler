/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import string local;
import stdlib;

public type FuncId u32;

type FunctionList struct {
    u32 count;
    u32 capacity;
    Function* functions;  // global list, index = FuncId
}

fn void FunctionList.init(FunctionList* l, u32 initial_size) {
    memset(l, 0, sizeof(FunctionList));
    l.count = 1;    // dont pass block 0
    l.resize(initial_size);
}

fn void FunctionList.free(FunctionList* l) {
    if (l.functions) stdlib.free(cast<void*>(l.functions));
}

fn void FunctionList.resize(FunctionList* l, u32 cap) {
    l.capacity = cap;
    Function* functions2 = stdlib.calloc(l.capacity, sizeof(Function));
    if (l.count > 1) {
        memcpy(functions2, l.functions, l.count * sizeof(Function));
        stdlib.free(l.functions);
    }
    l.functions = functions2;
}

fn FuncId FunctionList.add(FunctionList* l, GlobalId gid, bool external) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    u32 idx = l.count;
    Function* f = &l.functions[idx];
    f.init(gid, external);
    l.count++;
    return idx;
}

fn void FunctionList.clear(FunctionList* l) {
    l.count = 1;
}

fn u32 FunctionList.getCount(const FunctionList* l) {
    return l.count;
}

fn Function* FunctionList.get(const FunctionList* l, FuncId idx) {
    return &l.functions[idx];
}

public type Visitor fn void(void* arg, Function* f);

fn void FunctionList.visitExternal(const FunctionList* l, Visitor visitor, void* arg) {
    for (u32 i=1; i<l.count; i++) {
        Function* f = &l.functions[i];
        if (f.isExternal()) {
            visitor(arg, f);
        }
    }
}

fn void FunctionList.visitInternal(const FunctionList* l, Visitor visitor, void* arg) {
    for (u32 i=1; i<l.count; i++) {
        Function* f = &l.functions[i];
        if (!f.isExternal()) {
            visitor(arg, f);
        }
    }
}

