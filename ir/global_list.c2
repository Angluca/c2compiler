/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import string local;
import stdlib;

public type GlobalId u32;

type Global struct {
    u32 name;
    FuncId func;  // 0 if not created yet or not a function
}

type GlobalList struct {
    u32 count;
    u32 capacity;
    Global* globals;
}

fn void GlobalList.init(GlobalList* l, u32 initial_size) {
    memset(l, 0, sizeof(GlobalList));
    l.resize(initial_size);
}

fn void GlobalList.free(GlobalList* l) {
    if (l.globals) stdlib.free(cast<void*>(l.globals));
}

fn void GlobalList.resize(GlobalList* l, u32 cap) {
    l.capacity = cap;
    Global* globals2 = stdlib.calloc(l.capacity, sizeof(Global));
    if (l.count > 1) {
        memcpy(globals2, l.globals, l.count * sizeof(Global));
        stdlib.free(l.globals);
    }
    l.globals = globals2;
}

fn GlobalId GlobalList.add(GlobalList* l, u32 name, FuncId id) {
    if (l.count == l.capacity) l.resize(l.capacity * 2);

    GlobalId idx = l.count;
    Global* g = &l.globals[idx];
    g.name = name;
    g.func = id;
    l.count++;
    return idx;
}

/*
fn void GlobalList.clear(GlobalList* l) {
    l.count = 0;
}
*/

fn void GlobalList.setFunc(GlobalList* l, GlobalId id, FuncId func) {
    l.globals[id].func = func;

}
fn u32 GlobalList.getCount(const GlobalList* l) {
    return l.count;
}

fn Global* GlobalList.get(const GlobalList* l, GlobalId idx) {
    return &l.globals[idx];
}

