/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import color local;
import string_buffer;

import stdio;
import stdlib;
import string;

const char* col_Instr = color.Normal;
const char* col_Decl = color.Magenta;
const char* col_Name = color.White;
const char* col_Block = color.Cyan;
const char* col_Global = color.Bblue;
const char* col_Unknown = color.Yellow;
const char* col_Value = color.Magenta;
const char* col_Temp = color.Bgreen;
const char* col_Type = color.Green;
const char* col_Comment = color.Grey;


type PrintHelper struct {
    const Context* c;
    const BlockList* blocks;

    string_buffer.Buf* out;
    // TODO resize (must be at least same size as nr of instructions in function
    u32* temp_ids; // index = instr_idx[from start of func), value is temp%
    u32 temp_count;
    u32 fn_instr_start;
    u32 args_start;

    const Block* cur_block;
    u32 blk_instr_start;
    u32 blk_instr_count;
}

fn void PrintHelper.init(PrintHelper* ph, const Context* c) {
    ph.out = string_buffer.create(16*1024, useColor(), 2);

    // TODO print name of module

    ph.blocks = nil;
    ph.c = c;
    ph.temp_ids = stdlib.calloc(1024, sizeof(u32));
    ph.temp_count = 0;
    ph.cur_block = nil;
}

fn void PrintHelper.free(PrintHelper* ph) {
    ph.out.free();
    stdlib.free(ph.temp_ids);
}

fn void PrintHelper.print(const PrintHelper* ph) {
    ph.out.color(color.Normal);
    stdio.puts(ph.out.data());
}

fn void PrintHelper.resetTemps(PrintHelper* ph, u32 num_args, u32 fn_instr_start, u32 args_start) {
    ph.temp_count = num_args + 1;
    ph.fn_instr_start = fn_instr_start;
    ph.args_start = args_start;
    string.memset(ph.temp_ids, 0, 1024*sizeof(u32));   // TODO use cap
}

fn u32 PrintHelper.getTemp(PrintHelper* ph, u32 global_instr_idx) {
    u32 local_instr_idx = global_instr_idx - ph.fn_instr_start;
    u32 temp_nr = ph.temp_count;
    assert(local_instr_idx < 1024);
    assert(ph.temp_ids[local_instr_idx] == 0);
    ph.temp_ids[local_instr_idx] = temp_nr;
    ph.temp_count++;
    return temp_nr;
}

fn u32 PrintHelper.findTemp(PrintHelper* ph, u32 global_instr_idx) {
    u32 local_instr_idx = global_instr_idx - ph.fn_instr_start;
    assert(local_instr_idx < 1024);
    return ph.temp_ids[local_instr_idx];
}

fn u32 PrintHelper.findParam(PrintHelper* ph, u32 global_args_idx) {
    return global_args_idx - ph.args_start;
}

#if DebugIr
fn void print_dest(string_buffer.Buf* out, BlockId id) {
    if (id == 0) {
        out.add1('-');
    } else {
        out.print("%d", id);
    }
}
#endif

fn void print_func(void* arg, Function* f, const FunctionInfo* info) {
    PrintHelper* ph = arg;
    const Context* c = ph.c;

    ph.blocks = &info.blocks;

    u32* temps_ids; // index = instr_idx[from start of func), value is temp%
    u32 temp_count;
    string_buffer.Buf* out = ph.out;
    Type* args = c.args.getFrom(f.args.start);

    ph.resetTemps(f.args.count, 0, f.args.start);

    // print name
    GlobalId gid = f.getGid();
    const Global* g = c.globals.get(gid);
    out.color(color.Bmagenta);
    out.add("fn");
    out.color(color.Normal);
    if (args[0] != Type.None) {
        out.space();
        out.color(col_Type);
        out.add(args[0].str());
        out.color(color.Normal);
    }
    out.print(" %s(", c.pool.idx2str(g.name));
    // Note: start at 1, because entry 0 is return type
    for (u32 i=1; i<=f.args.count; i++) {
        if (i != 1) out.add(", ");
        out.color(col_Type);
        out.add(args[i].str());
        out.space();
        out.color(col_Temp);
        out.print("%%%d", i);
        out.color(color.Normal);
    }
    out.add(") {");
    out.add("  ");
    out.color(col_Comment);
    out.print("# %d blocks, %d instr", info.blocks.getCount(), info.instructions.getCount());
    out.newline();

    // print blocks
    u32 num_blks = info.blocks.getCount();
#if DebugIr
    out.color(color.Grey);
    out.print("  %d blocks\n", num_blks);
#endif

    const Block* blks = ph.blocks.get(0);
    for (u32 i=0; i<num_blks; i++) {
        ph.cur_block = &blks[i];
        const Block* b = ph.cur_block;
        out.color(color.Yellow);
        out.print("%s.%d:", b.getKindName(), i);
        if (!b.used) {
            out.color(color.Grey);
            out.add(" unused");
        }
        Index i_idx = b.getInstructions();
#if DebugIr
        out.color(color.Grey);
        out.space();
        print_dest(out, b.dests[0]);
        out.space();
        print_dest(out, b.dests[1]);
        out.print("  I[%d-%d]", i_idx.start, i_idx.start + i_idx.count -1);
#endif
        out.newline();
        // print instructions
        ph.blk_instr_start = i_idx.start;
        ph.blk_instr_count = i_idx.count;

        const Instr* instrs = info.instructions.get(i_idx.start);
        for (u32 j=0; j<i_idx.count; j++) {
            j += ph.printInstr(instrs, j);
        }
        ph.cur_block = nil;
    }

    out.color(color.Normal);
    out.add("}\n\n");
}

fn void Context.print_function(const Context* c, FuncId id, const FunctionInfo* info) @(unused) {
    PrintHelper ph;
    ph.init(c);

    print_func(&ph, c.functions.get(id), info);

    ph.print();
    ph.free();
}

public fn void Context.print(Context* c) {
    PrintHelper ph;
    ph.init(c);

    for (u32 i=0; i<c.globals.getCount(); i++) {
        const Global* g = c.globals.get(i);
        if (g.func == 0) {  // already printed
            ph.out.color(col_Global);
            ph.out.print("%s", c.pool.idx2str(g.name));
            ph.out.newline();
        }
    }
    ph.out.newline();

    c.functions.visitInternal(print_func, &ph);

    ph.print();
    ph.free();
}

fn bool PrintHelper.printInstr(PrintHelper* ph, const Instr* blk_instrs, u32 blk_instr_idx) {
    const Instr* i = &blk_instrs[blk_instr_idx];
    string_buffer.Buf* out = ph.out;
    out.indent(2);

    InstrKind k = i.getKind();
    if (i.hasResult()) {
        out.color(col_Temp);
        u32 temp_nr = ph.getTemp(ph.blk_instr_start + blk_instr_idx);
        out.print("%%%d", temp_nr);

        out.color(color.Normal);
        out.add(" = ");
    }
    out.color(col_Instr);
    out.add(i.getKindName());

    if (i.isCall()) {
        out.space();
        ph.printRef(i.args[0], false);
        out.add(" (");
        if (i.args[1].kind != RefKind.None) {
            ph.printRef(i.args[1], false);
        }
        out.add1(')');
    } else {
        for (u32 r=0; r<elemsof(i.args); r++) {
            if (i.args[r].isValid()) {
                if (r > 0) out.add1(',');
                out.space();
                ph.printRef(i.args[r], false);
            }
        }
    }


    // check for comments, return 1 if comment
    if (blk_instr_idx < ph.blk_instr_count -1) {
        const Instr* next = &blk_instrs[blk_instr_idx+1];
        if (next.getKind() == InstrKind.Comment) {
            out.add("   ");
            out.color(col_Comment);
            out.add("# ");
            out.add(ph.c.pool.idx2str(next.args[0].value));
            out.color(color.Normal);
            out.newline();
            return 1;
        }
    }

    out.newline();
    return 0;
}

fn void PrintHelper.printRef(PrintHelper* ph, Ref r, bool print_type) {
    string_buffer.Buf* out = ph.out;
    switch (r.getKind()) {
        case None:
            out.add("(none)");
            break;
        case Temp:
            out.color(col_Temp);
            out.print("%%%d", ph.findTemp(r.value));
#if DebugIr
            out.color(color.Grey);
            out.print("(T%d)", r.value);
#endif
            break;
        case Param:
            out.color(col_Temp);
            out.print("%%%d", ph.findParam(r.value));
#if DebugIr
            out.color(color.Grey);
            out.print("(P%d)", r.value);
#endif
            break;
        case JmpDest:
            const Block* b = ph.cur_block;
            out.color(col_Block);
            assert(b.dests[0]);
            Block* dest = ph.blocks.get(b.dests[0]);
            out.print("@%s.%d", dest.getKindName(), b.dests[0]);
            if (b.dests[1]) {
                out.add(", ");
                dest = ph.blocks.get(b.dests[1]);
                out.print("@%s.%d", dest.getKindName(), b.dests[1]);
            }
            break;
        case RefList:
            const Ref* refs = ph.c.refs.get(r.value);
            u32 i = 0;
            while (refs[i].kind != RefKind.None) {
                if (i != 0) out.add(", ");
                ph.printRef(refs[i], false);
                i++;
            }
            break;
        case Global:
            const Global* g = ph.c.globals.get(r.value);
            out.color(col_Global);
            out.print("@%s", ph.c.pool.idx2str(g.name));
            break;
        case Value:
            out.color(col_Value);
            out.print("%d", r.value);
            break;
        case Integer:
            out.color(col_Value);
            const Constant* con = ph.c.constants.get(r.value);
            out.print("%d", con.ivalue);
            break;
        case Float:
            // TODO
            break;
        case Double:
            // TODO
            break;
        case Text:
            out.color(col_Block);
            out.add(ph.c.pool.idx2str(r.value));
            break;
    }
    out.color(color.Normal);

}


fn void Context.dump_function(const Context* c, const FunctionInfo* info) @(unused) {
    string_buffer.Buf* out = string_buffer.create(16*1024, false, 1);
    dump_function_info(out, info);
    stdio.puts(out.data());
    out.free();
}

fn void dump_function_info(string_buffer.Buf* out, const FunctionInfo* info) @(unused) {
    out.add("  blocks:\n");
    for (u32 j=0; j<info.blocks.getCount(); j++) {
        const Block* b = info.blocks.get(j);
        Index b_idx = b.getInstructions();
        out.print("  [%3d] %12s  D %d|%d  I %d-%d  used %d",
            j, b.getKindName(), b.dests[0], b.dests[1], b_idx.start, b_idx.start + b_idx.count - 1, b.used);
        out.newline();
    }
    out.print("  instructions: %d\n", info.instructions.getCount());
    const Instr* instr = info.instructions.get(0);
    for (u32 i=0; i<info.instructions.getCount(); i++) {
        const Instr* r = &instr[i];
        out.print("  [%3d] %7s", i, r.getKindName());
        out.print("  %8s %3d  ", r.args[0].getKindName(), r.args[0].value);
        out.print("  %8s %3d  ", r.args[01].getKindName(), r.args[1].value);
        out.newline();
    }
}

public fn void Context.dump(const Context* c) @(unused) {
    string_buffer.Buf* out = string_buffer.create(16*1024, false, 1);

    out.add("globals:\n");
    for (u32 i=1; i<c.globals.getCount(); i++) {
        const Global* g = c.globals.get(i);
        out.print("  [%2d] %2d  %2d  %s\n", i, g.name, g.func, c.pool.idx2str(g.name));
    }
    out.newline();

    out.add("functions:\n");
    for (u32 i=1; i<c.functions.getCount(); i++) {
        const Function* f = c.functions.get(i);
        out.print("  [%2d] A %d-%d  Global %d", i,
            f.args.start, f.args.start + f.args.count -1, f.gid);
        if (f.info) dump_function_info(out, f.info);
        out.newline();
    }
    out.newline();

    //ArgList args;   // for functions

    out.print("refs: (%d)\n", c.refs.getCount());
    const Ref* refs = c.refs.get(0);
    for (u32 i=0; i<c.refs.getCount(); i++) {
        Ref r = refs[i];
        out.print("  [%2d] %8s  %d", i, r.getKindName(), r.value);
        out.newline();
    }
    out.newline();

    out.add("constants:\n");
    for (u32 i=0; i<c.constants.getCount(); i++) {
        const Constant* con = c.constants.get(i);
        // TODO need to know type, for now print as ivalue
        out.print("  [%2d] %d\n", i, con.ivalue);
    }
    out.newline();

    stdio.puts(out.data());
    out.free();
}

#if 0
public fn void Context.dump_temps(const Context* c) @(unused) {
    if (c.tmp_info.blocks.getCount() == 0) return;

    string_buffer.Buf* out = string_buffer.create(16*1024, false, 1);

    out.add("temp blocks:\n");
    for (u32 i=0; i<c.tmp_info.blocks.getCount(); i++) {
        const Block* b = c.tmp_info.blocks.get(i);
        Index b_idx = b.getInstructions();
        out.print("  [%3d] %12s  D %d-%d  I %d-%d",
            i, b.getKindName(), b.dests[0], b.dests[1], b_idx.start, b_idx.start + b_idx.count - 1);
        out.newline();
    }
    out.newline();

    out.add("instructions:\n");
    const Block* start_blk = c.tmp_info.blocks.get(0);
    const Instr* instr = c.instructions.get(0);
    for (u32 i=start_blk.instr.start; i<c.instructions.getCount(); i++) {
        const Instr* r = &instr[i];
        out.print("  [%3d] %7s", i, r.getKindName());
        out.print("  %8s %3d  ", r.args[0].getKindName(), r.args[0].value);
        out.print("  %8s %3d  ", r.args[01].getKindName(), r.args[1].value);
        out.newline();
    }
    out.newline();

    stdio.puts(out.data());
    out.free();
}
#endif

public fn void Context.report(Context* c) @(unused) {
    string_buffer.Buf* out = string_buffer.create(256, false, 1);

    u32 total_blocks = 0;
    u32 total_instr = 0;

    for (u32 i=0; i<c.functions.getCount(); i++) {
        const Function* f = c.functions.get(i);
        if (f.info) {
            total_blocks += f.info.blocks.getCount();
            total_instr += f.info.instructions.getCount();
        } else {
            GlobalId gid = f.getGid();
            const Global* g = c.globals.get(gid);
            out.print("NO INFO: %s\n", c.pool.idx2str(g.name));
        }
    }

    out.print("IR: %d funcs, %d args, %d refs, %d const, %d blocks, %d instr\n",
        c.functions.count, c.args.count, c.refs.count, c.constants.count,
        total_blocks, total_instr);

    stdio.puts(out.data());
    out.free();
}

