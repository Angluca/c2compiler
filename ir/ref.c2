/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

public type RefKind enum u8 {
    None,
    Temp,      // temp_idx (already resolved)
    Param,     // for functions, index into args
    JmpDest,   // for jmp/jmp_if, value is cur BlockId
    RefList,   // for calls, index into refs
    Symbol,    // index into symbols
    Value,     // int value that fits 28 bits
    Integer,   // constant_idx
    Float,     // constant_idx
    Double,    // constant_idx
    Text,      // idx into string pool, for comment
}

public type Ref struct {
    u32 kind : 4;
    u32 value : 28;
}
static_assert(4, sizeof(Ref));

public fn void Ref.init(Ref* r, RefKind kind, u32 value) {
    r.kind = kind;
    r.value = value;
}

fn RefKind Ref.getKind(const Ref* r) {
    return cast<RefKind>(r.kind);
}

fn bool Ref.isValid(const Ref* r) {
    return r.kind != RefKind.None;
}

fn bool Ref.isTemp(const Ref* r) {
    return r.kind == RefKind.Temp;
}

fn bool Ref.isRefList(const Ref* r) {
    return r.kind == RefKind.RefList;
}

fn const char* Ref.getKindName(const Ref* r) {
    switch (r.getKind()) {
    case None:      return "none";
    case Temp:      return "temp";
    case Param:     return "param";
    case JmpDest:   return "jmp_dest";
    case RefList:   return "ref_list";
    case Symbol:    return "symbol";
    case Value:     return "value";
    case Integer:   return "integer";
    case Float:     return "float";
    case Double:    return "double";
    case Text:      return "text";
    }
    return "?";
}

#if 0
public fn void Ref.dump(const Ref* d) {
    string_buffer.Buf* out = string_buffer.create(128, useColor(), 2);
    d.print(out, true);
    out.color(col_Normal);
    stdio.puts(out.data());
    out.free();
}

fn void Ref.print(const Ref* r, string_buffer.Buf* out, bool print_type) {

    switch (r.getKind()) {
    case None:
        out.add("(none)");
        break;
    case Temp:
        const Temp* temp = gbl.temps.get(r.value);
        if (print_type) {
            out.color(col_Temp);
            out.add(idx2str(temp.name_idx));
            if (temp.t.isValid()) {
                out.color(col_Normal);
                out.add(" =");
                temp.t.print(out);
                out.space();
            }
        } else {
            out.color(col_Temp);
            out.add(idx2str(temp.name_idx));
        }
        break;
    case Addr:
        out.color(col_Decl);
        out.add(idx2str(r.value));
        break;
    case LabelName:
        out.color(col_Unknown);
        out.add(idx2str(r.value));
        break;
    case Integer:
        out.color(col_Value);
        const Constant* c = gbl.constants.get(r.value);
        out.print("%d", c.ivalue);
        break;
    case Float:
        out.color(col_Value);
        const Constant* c = gbl.constants.get(r.value);
        out.print("%f", c.svalue);
        break;
    case Double:
        out.color(col_Value);
        const Constant* c = gbl.constants.get(r.value);
        out.print("%f", c.dvalue);
        break;
    }
    out.color(col_Normal);
}
#endif

