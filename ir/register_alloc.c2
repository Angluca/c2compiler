/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import stdlib;
import stdio local;

// TEMP here
type LiveVector struct  {
    u32 count;
    u32 cap;
    u32* temps;
}

fn void LiveVector.init(LiveVector* v) {
    v.count = 0;
    v.cap = 32;
    v.temps = stdlib.malloc(v.cap * sizeof(u32));
}

fn void LiveVector.free(LiveVector* v) {
    stdlib.free(v.temps);
}

fn void LiveVector.add(LiveVector* v, u32 idx) {
    //printf("add %d\n", idx);
    for (u32 i=0; i<v.count; i++) {
        if (v.temps[i] == idx) return;    // already in, ignore
    }
    // Note: interferes with all other vars in there
    for (u32 i=0; i<v.count; i++) {
        //printf("  interferes with %d\n", v.temps[i]);
    }
    assert(v.count < v.cap);
    v.temps[v.count] = idx;
    v.count++;
}

fn void LiveVector.remove(LiveVector* v, u32 idx) {
    //printf("remove %d\n", idx);
    for (u32 i=0; i<v.count; i++) {
        if (v.temps[i] == idx) {    // swap with last
            v.count--;
            if (i != v.count) v.temps[i] = v.temps[v.count];
            return;
        }
    }
    //printf("  not found\n");
}

fn void LiveVector.dump(const LiveVector* v) @(unused) {
    printf("Live: ");
    for (u32 i=0; i<v.count; i++) {
        printf(" %d", v.temps[i]);
    }
    printf("\n");
}

fn void Tools.allocateRegisters(Tools* t, FunctionInfo* fi) {
    // Need to know:
    // how many registers available
    // locations of params (%1, %2, etc)
    // or just assign virtual regs: R0, R1?
    // also need to know return register?

    // create interference graph.
    LiveVector v.init();

    // Start from Block 0:
    // for each successor Block:
    //    - if a loop back, just get phi vars? (LATER, for now assume no loops)
    //    - get LiveIn for each child, merge into own start vector
    // for all instructions bottom -> top
    // use lineair algorithm below
    // store results (if multiple rev blocks?), so no need to do again
    // return LiveIn

    // TEMP assume single point of return (so 1 end node)
    // TEMP just assume 1 block
    // start at bottom
    Instr* instrs = fi.instructions.get(0);
    i32 i = (i32)fi.instructions.getCount() - 1;
    while (i >= 0) {
        const Instr* ii = &instrs[i];
        // TODO use hash function to indicate interference? (easy to check)
        // TEMP ignore phi instructions + calls
        if (ii.hasResult()) {
            // remove from list
            v.remove((u32)i);
        }
        if (ii.args[0].isTemp()) {
            v.add(ii.args[0].value);
        }
        if (ii.args[1].isTemp()) {
            v.add(ii.args[1].value);
        }
        //printf("[%d] ", i);
        //v.dump();
        i--;
    }

    v.free();
}

