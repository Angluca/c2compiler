/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import stdlib;
import string local;
import stdio local;

type ReadSlotAccess struct {
    u16 done : 1;
    u16 slot : 15;
    u16 instr_idx;
}
static_assert(4, sizeof(ReadSlotAccess));

type WriteSlotAccess struct {
    u16 slot;
    // u16 pad
    Ref ref;
}
static_assert(8, sizeof(WriteSlotAccess));

type BlockIndex struct {
    u16 rd_start;
    u16 rd_count;
    u16 wr_start;
    u16 wr_count;
}

type StaticSlot struct {
    u16 slot;
    u32 temp_idx;
}

type SlotCollector struct {
    u32 read_idx;
    u32 write_idx;
    u32 num_writes;
    u32 num_blocks;
    ReadSlotAccess* reads;
    WriteSlotAccess* writes;
    WriteSlotAccess* writes2;
    BlockIndex* indexes;
    FunctionInfo* info;
    // TEMP hardcoded limit
    u32 num_static_slots;
    // static slots are slots used outside load/store and cannot be removed
    StaticSlot[32] static_slots;
}

const u32 SlotMax = 1024;

fn BlockIndex* SlotCollector.getBlock(const SlotCollector* c, BlockId blk_id) {
    return &c.indexes[blk_id];
}

fn void SlotCollector.create(SlotCollector* c) {
    memset(c, 0, sizeof(SlotCollector));
    // TEMP hardcoded max

    c.reads = stdlib.malloc(SlotMax * sizeof(ReadSlotAccess));
    c.writes = stdlib.malloc(SlotMax * sizeof(WriteSlotAccess));
    c.writes2 = stdlib.malloc(SlotMax * sizeof(WriteSlotAccess));

    // TEMP hardcoded max
    c.indexes = stdlib.malloc(256 * sizeof(BlockIndex));

}

fn void SlotCollector.free(SlotCollector* c) {
    stdlib.free(c.indexes);
    stdlib.free(c.writes2);
    stdlib.free(c.writes);
    stdlib.free(c.reads);
}

fn void SlotCollector.addStaticSlot(SlotCollector* c, u16 slot) {
    for (u32 i=0; i<c.num_static_slots; i++) {
        if (c.static_slots[i].slot == slot) return;
    }
    assert(c.num_static_slots < elemsof(c.static_slots));
    c.static_slots[c.num_static_slots].slot = slot;
    c.static_slots[c.num_static_slots].temp_idx = 0;
    c.num_static_slots++;
}

fn StaticSlot* SlotCollector.getStaticSlot(SlotCollector* c, u16 slot) {
    for (u32 i=0; i<c.num_static_slots; i++) {
        if (c.static_slots[i].slot == slot) return &c.static_slots[i];
    }
    return nil;
}

fn void SlotCollector.checkStaticSlots(SlotCollector* c, FunctionInfo* info) {
    // find all slots used outside load/stores, dont remove those
    // also convert slot x -> temp y for non-removed allocs

    Instr* instrs = c.info.instructions.get(0);
    u32 count = c.info.instructions.getCount();
    for (u32 i=0; i<count; i++) {
        const Instr* ii = &instrs[i];

        if (ii.isLoadStore()) continue;

        if (ii.isCall()) {
            if (ii.args[1].isRefList()) {
                Ref* refs = c.info.refs.get(ii.args[1].value);
                u32 r = 0;
                while (refs[r].kind != RefKind.None) {
                    if (refs[r].isSlot()) c.addStaticSlot((u16)refs[r].value);
                    r++;
                }
            }

        } else if (ii.isPhi()) {
            // TODO later
        } else {
            if (ii.args[0].isSlot()) c.addStaticSlot((u16)ii.args[0].value);
            if (ii.args[1].isSlot()) c.addStaticSlot((u16)ii.args[1].value);
        }
    }
}

fn void SlotCollector.fill(SlotCollector* c, FunctionInfo* info) {
    c.read_idx = 0;
    c.write_idx = 0;
    c.num_writes = 0;
    c.num_blocks = info.blocks.getCount();
    c.info = info;
    c.num_static_slots = 0;

    c.checkStaticSlots(info);

    for (u32 i=0; i<c.num_blocks; i++) {
        c.checkBlock(i);
    }
}

fn ReadSlotAccess* SlotCollector.findRead(const SlotCollector* c, BlockId blk_id, u16 slot) {
    const BlockIndex* bi = &c.indexes[blk_id];

    u32 slot_start = bi.rd_start;
    u32 slot_end = bi.rd_start + bi.rd_count;
    for (u32 i=slot_start; i<slot_end; i++) {
        ReadSlotAccess* ra = &c.reads[i];
        if (ra.slot == slot) return ra;
    }
    return nil;
}

fn const WriteSlotAccess* SlotCollector.findWrite(const SlotCollector* c, BlockId blk_id, u16 slot) {
    const BlockIndex* bi = &c.indexes[blk_id];

    u32 slot_start = bi.wr_start;
    u32 slot_end = bi.wr_start + bi.wr_count;
    for (u32 i=slot_start; i<slot_end; i++) {
        const WriteSlotAccess* wa = &c.writes[i];
        if (wa.slot == slot) {
            //printf("BB B%d return %d %p [%d  %d]\n", blk_id, i, wa, bi.wr_start, bi.wr_count);
            return wa;
        }
    }
    return nil;
}

fn void SlotCollector.checkRef(SlotCollector* c, Ref* r, u32 start) {
    if (!r.isSlot()) return;

    u16 slot = cast<u16>(r.value);
    const StaticSlot* s = c.getStaticSlot(slot);
    if (s) {
        r.kind = RefKind.Temp;
        r.value = s.temp_idx;
        return;
    }

    // check for writes
    for (u32 i=start; i<c.write_idx; i++) {
        if (c.writes[i].slot == slot) {
            // replace slot-ref with write-ref
            *r = c.writes[i].ref;
            return;
        }
    }
}

fn void SlotCollector.checkBlock(SlotCollector* c, BlockId blk_id) {
    /*
        Algorithm, for each block:
        - store last store per slot, replace slots (if we have a write)
            replace with copy:
                    store8 %1, s0  ->  %12 = copy %1
                    last write s0: %12
        - store first load per slot in block (if not after write)
        - replace slot read with last write (or leave)
        - replace slot writes with with write+copy (or leave)

        After this step on all blocks, re-visit all blocks:
        - recurse into reads/writes
    */
    Block* b = c.info.blocks.get(blk_id);
    BlockIndex* bi = &c.indexes[blk_id];

    bi.rd_start = cast<u16>(c.read_idx);
    bi.wr_start = cast<u16>(c.write_idx);

    u16 alloc_slot = 0;
    // for each block, trace reads-after-write, replace Sx with Temp

    Instr* ii = c.info.instructions.get(b.instr.start);
    for (u32 i=0; i<b.instr.count; i++) {
        Instr* cur = &ii[i];

        u16 idx = cast<u16>(b.instr.start + i);

        switch(cur.getKind()) {
        case Load1:
        case Load2:
        case Load4:
        case Load8:
            if (!cur.args[0].isSlot()) continue;

            // if non-removed alloc slot, replace with Temp

            // convert to Copy
            cur.instrBits.kind = InstrKind.Copy;

            // TODO could use bit-vector for reads/writes
            bool found = false;
            u16 slot = cast<u16>(cur.args[0].value);
            //printf("[%d] load %d (%s %d)\n", i, slot, cur.args[0].getKindName(), cur.args[0].value);
            // ignore if already written here. Cannot use findWrite yet!
            for (u32 j=bi.wr_start; j<c.write_idx; j++) {
                if (c.writes[j].slot == slot) {
                    // replace slot-ref with write-ref
                    cur.args[0] = c.writes[j].ref;
                    found = true;
                    break;
                }
            }
            if (found) continue;

            // for reads without a write this block, just convert to copy <slot> and leave for later

            // only capture first read
            for (u32 j=bi.rd_start; j<c.read_idx; j++) {
                if (c.reads[j].slot == slot) {
                    found = true;
                    break;
                }
            }
            if (found) continue;

            assert(c.read_idx < SlotMax);
            ReadSlotAccess* ra = &c.reads[c.read_idx++];
            ra.done = 0;
            ra.slot = slot;
            ra.instr_idx = idx;
            break;
        case Store1:
        case Store2:
        case Store4:
        case Store8:
            if (!cur.args[1].isSlot()) continue;

            // if non-removed alloc slot, replace with Temp

            u16 slot = cast<u16>(cur.args[1].value);

            // convert into Copy, convert Slot to Temp, store that as last write
            cur.instrBits.kind = InstrKind.Copy;
            cur.instrBits.has_result = 1;
            cur.args[1].kind = RefKind.None;
            cur.args[1].value = 0;


            WriteSlotAccess* wa = nil;
            // overwrite if already written (track last write)
            for (u32 j=bi.wr_start; j<c.write_idx; j++) {
                if (c.writes[j].slot == slot) {
                    wa = &c.writes[j];
                    break;
                }
            }

            if (!wa) {
                assert(c.write_idx < SlotMax);
                wa = &c.writes[c.write_idx++];
                wa.slot = slot;
                c.num_writes++;
            }
            wa.ref = { RefKind.Temp, idx };
            //printf("[%d] store %d (%s %d)\n", i, slot, wa.ref.getKindName(), wa.ref.value);
#if 0
            cur.clear();
            if (i + 1 < b.instr.count) {
                Instr* next = &ii[i+1];
                if (next.isComment()) {
                    next.clear();
                    i++;
                }
            }
#endif
            break;
        case Alloc1:
        case Alloc2:
        case Alloc4:
        case Alloc8:
            // check if used outside load/store (eg in add for array index)
            // only remove if only used as load/store (eg. can be a register)
            StaticSlot* s = c.getStaticSlot(alloc_slot);
            if (s) {
                s.temp_idx = i;
            } else {
                cur.clear();
                if (i + 1 < b.instr.count) {
                    Instr* next = &ii[i+1];
                    if (next.isComment()) {
                        next.clear();
                        i++;
                    }
                }
            }
            alloc_slot++;
            break;
        case Call:
            if (cur.args[1].isRefList()) {
                Ref* refs = c.info.refs.get(cur.args[1].value);
                u32 r = 0;
                while (refs[r].kind != RefKind.None) {
                    c.checkRef(&refs[r], bi.wr_start);
                    r++;
                }
            }
            break;
        // TODO can phi (from ternary operator) have Slot Refs?
        default:
            c.checkRef(&cur.args[0], bi.wr_start);
            c.checkRef(&cur.args[0], bi.wr_start);
            break;
        }
    }

    bi.rd_count = cast<u16>(c.read_idx) - bi.rd_start;
    bi.wr_count = cast<u16>(c.write_idx) - bi.wr_start;
}

fn void SlotCollector.insertWrite(SlotCollector* c, BlockId blk_id, u16 slot, Ref ref) {
    // TODO think of smarter way, for now move entire block to end and add
    BlockIndex* bi = &c.indexes[blk_id];
    assert(c.write_idx + bi.wr_count + 1 < SlotMax);
    if (bi.wr_count) {
        memcpy(&c.writes[c.write_idx], &c.writes[bi.wr_start], bi.wr_count * sizeof(WriteSlotAccess));
    }
    bi.wr_start = cast<u16>(c.write_idx);
    c.write_idx += bi.wr_count;
    //stdio.printf("SET %d\n", c.write_idx);
    WriteSlotAccess* wa = &c.writes[c.write_idx++];
    c.num_writes++;
    bi.wr_count++;
    wa.slot = slot;
    wa.ref = ref;

    if (c.write_idx > c.num_writes + 200) c.defragWrites();
}

// when adding writes, they are copied to tail, so gaps appear. Defrag removes these
fn void SlotCollector.defragWrites(SlotCollector* c) {
    u16 out_idx = 0;
    for (u32 i=0; i<c.num_blocks; i++) {
        BlockIndex* bi = &c.indexes[i];
        if (bi.wr_count == 0) continue;

        memcpy(&c.writes2[out_idx], &c.writes[bi.wr_start], bi.wr_count * sizeof(WriteSlotAccess));
        bi.wr_start = out_idx;
        out_idx += bi.wr_count;
    }
    WriteSlotAccess* tmp = c.writes;
    c.writes = c.writes2;
    c.writes2 = tmp;
    c.write_idx = out_idx;
}

fn void SlotCollector.dump(const SlotCollector* c) @(unused) {
    printf("Access: [%d reads, %d writes, %d blocks]\n", c.read_idx, c.write_idx, c.num_blocks);
    for (u32 i=0; i<c.num_blocks; i++) {
        const BlockIndex* bi = &c.indexes[i];
        printf("  B%d  [%2d %2d | %2d %2d]  ", i, bi.rd_start, bi.rd_count, bi.wr_start, bi.wr_count);
        printf("R");
        if (bi.rd_count) {
            u32 start = bi.rd_start;
            u32 end = bi.rd_start + bi.rd_count;
            for (u32 j=start; j<end; j++) {
                const ReadSlotAccess* ra = &c.reads[j];
                printf(" %d", ra.slot);
                printf("(%d)", ra.instr_idx);
            }
        }
        printf(" | W");
        if (bi.wr_count) {
            u32 start = bi.wr_start;
            u32 end = bi.wr_start + bi.wr_count;
            for (u32 j=start; j<end; j++) {
                const WriteSlotAccess* wa = &c.writes[j];
                printf(" %d", wa.slot);
                printf("(%s %d)", wa.ref.getKindName(), wa.ref.value);
            }
        }
        printf("\n");
    }
    printf("\n");
}

