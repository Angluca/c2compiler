/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import stdlib;
import string;
import stdio local;

type ReadSlotAccess struct {
    u16 done : 1;
    u16 slot : 15;
    u16 instr_idx;
}
static_assert(4, sizeof(ReadSlotAccess));

type WriteSlotAccess struct {
    u16 slot;
    // u16 pad
    Ref ref;
}
static_assert(8, sizeof(WriteSlotAccess));

type BlockIndex struct {
    u16 rd_start;
    u16 rd_count;
    u16 wr_start;
    u16 wr_count;
}

type SlotCollector struct {
    u32 read_idx;
    u32 write_idx;
    u32 num_writes;
    u32 num_blocks;
    ReadSlotAccess* reads;
    WriteSlotAccess* writes;
    WriteSlotAccess* writes2;
    BlockIndex* indexes;
    FunctionInfo* info;
}

const u32 SlotMax = 1024;

fn BlockIndex* SlotCollector.getBlock(const SlotCollector* c, BlockId blk_id) {
    return &c.indexes[blk_id];
}

fn void SlotCollector.create(SlotCollector* c) {
    string.memset(c, 0, sizeof(SlotCollector));
    // TEMP hardcoded max
    c.reads = stdlib.malloc(SlotMax * sizeof(ReadSlotAccess));
    c.writes = stdlib.malloc(SlotMax * sizeof(WriteSlotAccess));
    c.writes2 = stdlib.malloc(SlotMax * sizeof(WriteSlotAccess));

    // TEMP hardcoded max
    c.indexes = stdlib.malloc(256 * sizeof(BlockIndex));

}

fn void SlotCollector.free(SlotCollector* c) {
    stdlib.free(c.indexes);
    stdlib.free(c.writes2);
    stdlib.free(c.writes);
    stdlib.free(c.reads);
}

fn void SlotCollector.fill(SlotCollector* c, FunctionInfo* info) {
    c.read_idx = 0;
    c.write_idx = 0;
    c.num_writes = 0;
    c.num_blocks = info.blocks.getCount();
    c.info = info;

    for (u32 i=0; i<c.num_blocks; i++) {
        c.checkBlock(i);
    }
}

fn ReadSlotAccess* SlotCollector.findRead(const SlotCollector* c, BlockId blk_id, u16 slot) {
    const BlockIndex* bi = &c.indexes[blk_id];

    u32 slot_start = bi.rd_start;
    u32 slot_end = bi.rd_start + bi.rd_count;
    for (u32 i=slot_start; i<slot_end; i++) {
        ReadSlotAccess* ra = &c.reads[i];
        if (ra.slot == slot) return ra;
    }
    return nil;
}

fn const WriteSlotAccess* SlotCollector.findWrite(const SlotCollector* c, BlockId blk_id, u16 slot) {
    const BlockIndex* bi = &c.indexes[blk_id];

    u32 slot_start = bi.wr_start;
    u32 slot_end = bi.wr_start + bi.wr_count;
    for (u32 i=slot_start; i<slot_end; i++) {
        const WriteSlotAccess* wa = &c.writes[i];
        if (wa.slot == slot) {
            //printf("BB B%d return %d %p [%d  %d]\n", blk_id, i, wa, bi.wr_start, bi.wr_count);
            return wa;
        }
    }
    return nil;
}

fn void SlotCollector.checkBlock(SlotCollector* c, BlockId blk_id) {
    Block* b = c.info.blocks.get(blk_id);
    BlockIndex* bi = &c.indexes[blk_id];

    bi.rd_start = cast<u16>(c.read_idx);
    bi.wr_start = cast<u16>(c.write_idx);

    Instr* ii = c.info.instructions.get(b.instr.start);
    for (u32 i=0; i<b.instr.count; i++) {
        Instr* cur = &ii[i];
        if (!cur.isLoadOrStore()) continue;

        u16 idx = cast<u16>(b.instr.start + i);

        bool found = false;
        if (cur.isLoad()) {
            if (!cur.args[0].isSlot()) continue;

            // convert to Copy
            cur.instrBits.kind = InstrKind.Copy;

            u16 slot = cast<u16>(cur.args[0].value);
            // ignore if already written here. Cannot use findWrite yet!
            for (u32 j=bi.wr_start; j<c.write_idx; j++) {
                if (c.writes[j].slot == slot) {
                    found = true;
                    break;
                }
            }
            if (found) continue;

            // only capture first read
            for (u32 j=bi.rd_start; j<c.read_idx; j++) {
                if (c.reads[j].slot == slot) {
                    found = true;
                    break;
                }
            }
            if (found) continue;

            assert(c.read_idx < SlotMax);
            ReadSlotAccess* ra = &c.reads[c.read_idx++];
            ra.done = 0;
            ra.slot = slot;
            ra.instr_idx = idx;
        } else {
            if (!cur.args[1].isSlot()) continue;

            // convert to Copy
            cur.instrBits.kind = InstrKind.Copy;

            u16 slot = cast<u16>(cur.args[1].value);
            WriteSlotAccess* wa = nil;
            // overwrite if already written (track last write)
            for (u32 j=bi.wr_start; j<c.write_idx; j++) {
                if (c.writes[j].slot == slot) {
                    wa = &c.writes[j];
                    break;
                }
            }

            if (!wa) {
                assert(c.write_idx < SlotMax);
                wa = &c.writes[c.write_idx++];
                c.num_writes++;
            }

            wa.slot = slot;
            wa.ref = cur.args[0];
        }
    }

    bi.rd_count = cast<u16>(c.read_idx) - bi.rd_start;
    bi.wr_count = cast<u16>(c.write_idx) - bi.wr_start;
}

fn void SlotCollector.insertWrite(SlotCollector* c, BlockId blk_id, u16 slot, Ref ref) {
    // TODO think of smarter way, for now move entire block to end and add
    BlockIndex* bi = &c.indexes[blk_id];
    assert(c.write_idx + bi.wr_count + 1 < SlotMax);
    if (bi.wr_count) {
        string.memcpy(&c.writes[c.write_idx], &c.writes[bi.wr_start], bi.wr_count * sizeof(WriteSlotAccess));
    }
    bi.wr_start = cast<u16>(c.write_idx);
    c.write_idx += bi.wr_count;
    //stdio.printf("SET %d\n", c.write_idx);
    WriteSlotAccess* wa = &c.writes[c.write_idx++];
    c.num_writes++;
    bi.wr_count++;
    wa.slot = slot;
    wa.ref = ref;

    if (c.write_idx > c.num_writes + 200) c.defragWrites();
}

fn void SlotCollector.defragWrites(SlotCollector* c) {
    u16 out_idx = 0;
    for (u32 i=0; i<c.num_blocks; i++) {
        BlockIndex* bi = &c.indexes[i];
        if (bi.wr_count == 0) continue;

        string.memcpy(&c.writes2[out_idx], &c.writes[bi.wr_start], bi.wr_count * sizeof(WriteSlotAccess));
        bi.wr_start = out_idx;
        out_idx += bi.wr_count;
    }
    WriteSlotAccess* tmp = c.writes;
    c.writes = c.writes2;
    c.writes2 = tmp;
    c.write_idx = out_idx;
}

fn void SlotCollector.dump(const SlotCollector* c) @(unused) {
    printf("Access: [%d reads, %d writes, %d blocks]\n", c.read_idx, c.write_idx, c.num_blocks);
    for (u32 i=0; i<c.num_blocks; i++) {
        const BlockIndex* bi = &c.indexes[i];
        //printf("  B %d  R %d %d  W %d %d\n", i, bi.rd_start, bi.rd_count, bi.wr_start, bi.wr_count);
        printf("  B%d  [%2d %2d | %2d %2d]  ", i, bi.rd_start, bi.rd_count, bi.wr_start, bi.wr_count);
        printf("R");
        if (bi.rd_count) {
            u32 start = bi.rd_start;
            u32 end = bi.rd_start + bi.rd_count;
            for (u32 j=start; j<end; j++) {
                const ReadSlotAccess* ra = &c.reads[j];
                printf(" %d", ra.slot);
            }
        }
        printf(" | W");
        if (bi.wr_count) {
            u32 start = bi.wr_start;
            u32 end = bi.wr_start + bi.wr_count;
            for (u32 j=start; j<end; j++) {
                const WriteSlotAccess* wa = &c.writes[j];
                printf(" %d", wa.slot);
            }
        }
        printf("\n");
    }
}

