/* Copyright 2022-2025 Bas van den Berg
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

module ir;

import stdlib;
import string;
import stdio local;

fn bool block_has_dest(const Block* b, const CaseList* cases, u32 dest) {
    if (b.end_with_switch) {
        CaseId case_id = b.dests[0];
        u32 num_cases = b.dests[1];
        for (u32 j=0; j<num_cases; j++) {
            Case* cs = cases.get(case_id+j);
            if (cs.block == dest) return true;
        }
    } else {
        if (b.dests[0] == dest) return true;
        if (b.dests[1] == dest) return true;
    }
    return false;
}

type RevIndex struct {
    u16 start;
    u16 count;
}

type RevList struct {
    u8* nodes;
    u32 capacity;
    u32 count;

    u32 block_capacity;
    u32 block_count;
    RevIndex* indexes;  // [num_blocks]
}

fn void RevList.create(RevList* r, u32 num_blocks) {
    string.memset(r, 0, sizeof(RevList));

    r.capacity = 1024;
    r.block_capacity = num_blocks;
    r.nodes = stdlib.malloc(r.capacity * sizeof(u8));
    r.indexes = stdlib.malloc(num_blocks * sizeof(RevIndex));
}

fn void RevList.build(RevList* r, FunctionInfo* info) {
    r.count = 0;
    u32 num_blocks = info.blocks.getCount();
    if (num_blocks > r.block_capacity) {
        assert(0); // TODO resize
    }
    r.block_count = info.blocks.getCount();

    // no block goes to block 0
    // Note: pretty inefficient way to do this, but easy code
    r.indexes[0].start = 0;
    r.indexes[0].count = 0;
    for (u32 i=1; i<num_blocks; i++) {
        u32 dest = i;
        u32 start = r.count;
        for (u32 j=0; j<num_blocks; j++) {
            Block* b = info.blocks.get(j);
            if (block_has_dest(b, &info.cases, dest)) {
                assert(r.count <  r.capacity); // TODO resize
                r.nodes[r.count++] = cast<u8>(j);
            }
        }
        u32 count = r.count - start;
        r.indexes[i].count = cast<u16>(count);
        if (count) {
            r.indexes[i].start = cast<u16>(start);
        } else {
            r.indexes[i].start = 0;
        }
    }
}

fn void RevList.dump(const RevList* r) @(unused) {
    printf("Revlist [%d blocks]\n", r.block_count);
    for (u32 i=0; i<r.block_count; i++) {
        printf("  B%d  [", i);
        u32 start = r.indexes[i].start;
        u32 count = r.indexes[i].count;
        for (u32 j=0; j<count; j++) {
            printf(" %d", r.nodes[start+j]);

        }
        printf(" ]\n");
    }
}

fn void RevList.free(RevList* r) {
    stdlib.free(r.nodes);
    stdlib.free(r.indexes);
}

fn RevIndex RevList.getBlockIndex(const RevList* r, BlockId blk_id) {
    return r.indexes[blk_id];
}

fn u8 RevList.getRev(const RevList* r, u32 idx) {
    return r.nodes[idx];
}


fn void Context.create_ssa(Context* c, const Symbol* symbol, FunctionInfo* fi, const char* name, bool print) {
    //printf("create SSA %s\n", name);
    Tools* t = &c.tools;
    const u32 num_blocks = fi.blocks.getCount();

    t.inserter.clear();

    // convert load/stores
    t.collector.fill(fi);
    t.revlist.build(fi);
    t.active_blocks.reset(num_blocks);

    //t.collector.dump();
    //t.revlist.dump();
    if (print) c.print_function(symbol, fi, "after collector.fill");

    /*
        Algorithm for PHI insertion

        foreach block
          foreach read
            foreach predecessor
                checkPredBlock
            if num_results > 1 -> Phi, update read-ref
            mark read as done

        checkPredBlock
            checkPredessors
            if num_results > 1 -> Phi
            if (also have same read)
                mark as done
                update read_ref
            return ref
    */
    u32 indent = 1;
    PhiCache results.init();
    // Note: block 0 will usually never have reads, but can have after optimizations with loops
    for (u32 i = 0; i < num_blocks; i++) {
        u32 blk_id = i;
        // Note: dont add start block as active, since it might provide write itself (in loops)
        const BlockIndex* bi = t.collector.getBlock(blk_id);
        for (u32 j = bi.rd_start; j < bi.rd_start + bi.rd_count; j++) {
            ReadSlotAccess* ra = &t.collector.reads[j];
            if (ra.done) continue; // already done via checkPredBlock
            u16 slot = ra.slot;
            //printf(">> B%d S%d <<\n", blk_id, slot);

            results.clear();
            RevIndex revs = t.revlist.getBlockIndex(blk_id);
            for (u32 r = revs.start; r < revs.start + revs.count; r++) {
                u32 rev_blk = t.revlist.getRev(r);
                if (!t.active_blocks.get(rev_blk)) {
                    Ref ref = c.checkPredBlock(rev_blk, slot, indent+1, fi);
                    if (ref.isValid()) {
                        //printf("  B%d S%d Pred %d match (%s %d)\n", blk_id, slot, rev_blk, ref.getKindName(), ref.value);
                        results.add(rev_blk, ref);
                    }
                }
            }

            // Note: results.getCount() can be 0 if only passing variable to calls
            if (results.getCount()) {
                Ref ref;
                if (results.getCount() > 1) {
                    //for (u32 ii = 0; ii < indent; ii++) printf("  ");
                    //printf("B%d NEED PHI for S%d\n", blk_id, slot);
                    // TODO: duplicate code with checkPredBlock, but might change soon
                    // COULD ACTUALLY replace the load by the PHI here! (same for checkPredBlock)
                    Ref phi_ref = fi.addPhiInstr(&results);
                    Block* b = fi.blocks.get(blk_id);
                    u32 loc = b.instr.start;
                    if (fi.instructions.get(loc).isComment()) loc++;
                    // TODO overwrite read
                    t.inserter.add(loc, phi_ref.value);
                    // add comment
                    char[8] tmp;
                    sprintf(tmp, "s%d", slot);
                    Ref com_ref = c.addComment2(tmp, fi);
                    t.inserter.add(loc, com_ref.value);

                    // TODO there could be an existing write?
                    t.collector.insertWrite(blk_id, slot, phi_ref);
                    // change load to copy with phi_ref
                    ref = phi_ref;
                } else {
                    ref = results.stash[0].ref;
                }

                // modify read instruction with new ref (replaces slot)
                Instr* read_instr = fi.instructions.get(ra.instr_idx);
                read_instr.args[0] = ref;

                const WriteSlotAccess* wr = t.collector.findWrite(blk_id, slot);
                if (!wr) {
                    assert(ref.isValid());
                    // add virtual write to prevent doing the same work again
                    t.collector.insertWrite(blk_id, slot, ref);
                }
            }
            ra.done = 1;
        }
        t.active_blocks.clear(i);
    }
    results.free();

    //t.inserter.dump();
}

// TODO pas Optimizer? (with Context, FunctionInfo, other?)
// TODO dont pass info as separate arg, but combine with Context?
fn Ref Context.checkPredBlock(Context* c, BlockId blk_id, u16 slot, u32 indent, FunctionInfo* fi) {
    Tools* t = &c.tools;
    // TODO do loop detection
    Ref ref = { };

    t.active_blocks.set(blk_id);

    // check if this block writes slot, otherwise propagate up
    //for (u32 ii=0; ii<indent; ii++) printf("  ");
    //printf("B%d check S%d\n", blk_id, slot);

    const WriteSlotAccess* wr = t.collector.findWrite(blk_id, slot);
    if (wr) {
        //for (u32 ii=0; ii<indent; ii++) printf("  ");
        //printf("B%d S%d W %s %d\n", blk_id, slot, wr.ref.getKindName(), wr.ref.value);
        // Note: can stil have read before this write, that's ok
        t.active_blocks.clear(blk_id);
        return wr.ref;
    }

    // search all predecessors
    RevIndex revs = t.revlist.getBlockIndex(blk_id);
    u32 rev_end = revs.start + revs.count;
    PhiCache results.init();
    for (u32 j = revs.start; j < rev_end; j++) {
        u32 rev_blk = t.revlist.getRev(j);
        // TODO do check block itself, but not more (for loops)
        if (!t.active_blocks.get(rev_blk)) {
            Ref ref2 = c.checkPredBlock(rev_blk, slot, indent+1, fi);
            if (ref2.isValid()) {
                //for (u32 ii=0; ii<indent; ii++) printf("  ");
                //printf("B%d S%d Pred %d match (%s %d)\n", blk_id, slot, rev_blk, ref2.getKindName(), ref2.value);
                results.add(rev_blk, ref2);
            }
        }
    }
    // if no matches, variable is undefined!
    if (results.getCount() != 0) {
        ReadSlotAccess* my_read = t.collector.findRead(blk_id, slot);
        if (my_read) {
            my_read.done = 1;
            //for (u32 ii=0; ii<indent; ii++) printf("  ");
            //printf("B%d finished my S%d\n", blk_id, slot);
        }

        if (results.getCount() != 0) {
            if (results.getCount() > 1) {
                //for (u32 ii=0; ii<indent; ii++) printf("  ");
                //printf("B%d NEED PHI for S%d\n", blk_id, slot);
                ref = fi.addPhiInstr(&results);
                // TODO replace existing first instruction
                Block* b = fi.blocks.get(blk_id);
                u32 loc = b.instr.start;
                if (fi.instructions.get(loc).isComment()) loc++;
                // TODO overwrite read if there is one
                t.inserter.add(loc, ref.value);
                // add comment
                char[8] tmp;
                sprintf(tmp, "s%d", slot);
                Ref com_ref = c.addComment2(tmp, fi);
                t.inserter.add(loc, com_ref.value);
                if (my_read) {
                    // TODO replace load with copy with phi_ref
                }
            } else {
                ref = results.stash[0].ref;
            }

            // add virtual write to prevent doing the same work again
            assert(ref.isValid());
            t.collector.insertWrite(blk_id, slot, ref);
            if (my_read) {
                // TODO replace load with copy with ref to result[0]
            }
        }
    }
    results.free();
    t.active_blocks.clear(blk_id);
    return ref;
}

fn void Tools.eliminateCopies(Tools* t, FunctionInfo* fi) {
    // do copy eliminination. Try 1 pass (if possible)
    // otherwise mark in prev run and apply here
    t.copies.clear();

    // Needs 2 loops, one to fill copylist, remove copies, 2nd to replace
    // Note: the filling could be done in previous loop already!

    Instr* all = fi.instructions.get(0);

    for (u32 i=0; i<fi.instructions.getCount(); i++) {
        Instr* instr = &all[i];
        if (instr.isCopy()) {
            t.copies.add(i, instr.args[0]);
            //printf("add %d   %s\n", i, instr.args[0].str());
            instr.clear();
        }
    }
    for (u32 i=0; i<fi.instructions.getCount(); i++) {
        Instr* instr = &all[i];
        if (instr.isPhi()) {
            PhiClause* clauses = fi.phis.get(instr.phi_clauses.start);
            for (u32 j=0; j<instr.phi_clauses.count; j++) {
                Ref* r = &clauses[j].ref;
                if (r.isTemp()) {
                    Ref* copy = t.copies.find(r.value);
                    if (copy) {
                        //printf("replace %s with %s\n", r.str(), copy.str());
                        *r = *copy;
                    }
                }
            }
        } else {
            Ref* r = &instr.args[0];
            if (r.isTemp()) {
                Ref* copy = t.copies.find(r.value);
                if (copy) {
                    //printf("replace %s with %s\n", r.str(), copy.str());
                    instr.args[0] = *copy;
                }
            }
            r = &instr.args[1];
            if (r.isTemp()) {
                Ref* copy = t.copies.find(r.value);
                if (copy) {
                    //printf("replace %s with %s\n", r.str(), copy.str());
                    instr.args[1] = *copy;
                }
            } else if (r.isRefList()) { // can only occur on args[1]
                Ref* refs = fi.refs.get(r.value);
                u32 idx = 0;
                while (1) {
                    Ref* r2 = &refs[idx];
                    if (r2.isTemp()) {
                        Ref* copy = t.copies.find(r2.value);
                        if (copy) {
                            //printf("replace %s with %s\n", refs[idx].str(), copy.str());
                            refs[idx] = *copy;
                        }
                    }
                    if (!r2.isValid()) break;
                    idx++;
                }
            }
        }
    }
}


fn void Tools.checkRef(Tools* t, Ref r) {
    if (r.isTemp()) t.usage.incr(r.value);
}

fn void Tools.removeUnused(Tools* t, FunctionInfo* fi) {
    t.usage.clear(fi.instructions.getCount());

    // Usage: counter both usage and if it has a result.
    // count 0 means: has no result, (of course) not used
    // count 1 means: has result, not used (could still have side effects)
    // count 2+ means: used

    Instr* all = fi.instructions.get(0);
    for (u32 i=0; i<fi.instructions.getCount(); i++) {
        Instr* is = &all[i];
        if (is.hasResult()) t.usage.incr(i);

        switch (is.getKind()) {
        case Call:
            // TODO check if call with side effects.
            // TEMP do extra incr then so it will not be pruned (could be void, so incr twice)
            t.usage.incr(i);
            t.usage.incr(i);
            t.checkRef(is.args[0]);
            t.checkRef(is.args[1]);
            if (is.args[1].isRefList()) {
                const Ref* refs = fi.refs.get(is.args[1].value);
                u32 j = 0;
                while (refs[j].kind != RefKind.None) {
                    t.checkRef(refs[j]);
                    j++;
                }
            }
            break;
        case Switch:
            t.checkRef(is.args[0]);
            break;
        case Phi:
            PhiClause* clauses = fi.phis.get(is.phi_clauses.start);
            for (u32 p=0; p<is.phi_clauses.count; p++) {
                t.checkRef(clauses[p].ref);
            }
            break;
        default:
            t.checkRef(is.args[0]);
            t.checkRef(is.args[1]);
            break;
        }
    }

    //t.usage.dump();
    t.usage.fillQueue();

    while (t.usage.hasWork()) {
        u32 i = t.usage.popHead();
        Instr* is = &all[i];
        Ref* r = &is.args[0];
        if (r.isTemp()) t.usage.decr(r.value);
        r = &is.args[1];
        if (r.isTemp()) t.usage.decr(r.value);
        is.clear();
    }
}

#if 0
fn bool Tools.propagateConstants(Tools* t, FunctionInfo* fi) {
// return true if changed
    // look for add x, y where x, y are both constants, replace with copy
    bool changed = false;
    u32 matches = 0;

    Instr* all = fi.instructions.get(0);
    for (u32 i=0; i<fi.instructions.getCount(); i++) {
        Instr* instr = &all[i];
        if (!instr.isArithmetic()) continue;

        if (!instr.args[0].isConstant()) continue;
        if (!instr.args[1].isConstant()) continue;

        matches++;
        printf("MATCH %d  %d\n", i, matches);
        // only 29 matches in c2c!
        changed = true;
    }

    return changed;
}
#endif

fn void Tools.removeNone(Tools* t, FunctionInfo* fi) {
    t.inserter.clear();
    t.fixup_function(fi);
}

fn void Tools.fixup_function(Tools* t, FunctionInfo* fi) {
    // only change instructions!, not blocks (except to update instr start+count)
    u32 old_icount = fi.instructions.getCount();
    InstrList i_new.init(old_icount);   // note: new instructions are already in there

    t.conversion.clear(old_icount);
    t.inserter.start();

    const Instr* i_old = fi.instructions.get(0);
    u32 blk_count = fi.blocks.getCount();
    // 1st step: insert new instructions, remove None instructions
    u32 new_index = 0;
    for (u32 i=0; i<blk_count; i++) {
        Block* b = fi.blocks.get(i);
        u32 i_start = b.instr.start;
        u32 i_count = b.instr.count;
        //stdio.printf("   B[%d] %d - %d\n", i, i_start, i_start+i_count-1);
        u32 new_start = new_index;
        for (u32 j=i_start; j<i_start+i_count; j++) {
            // check for insertion
            while (u32 instr_idx = t.inserter.insert(j)) {
                Instr* is = i_new.add();
                is.copy(&i_old[instr_idx]);
                t.conversion.set(instr_idx, new_index);
                new_index++;
            }

            if (i_old[j].isNone()) continue;

            Instr* is = i_new.add();
            is.copy(&i_old[j]);
            t.conversion.set(j, new_index);

            new_index++;
        }
        b.instr.start = new_start;
        b.instr.count = new_index - new_start;
    }

    i_new.swap(&fi.instructions);
    i_new.free();
    t.inserter.clear();

    // 2nd step: update all temps (needed after first loop for forwards refs)
    Instr* instrs = fi.instructions.get(0);
    for (u32 i=0; i<blk_count; i++) {
        Block* b = fi.blocks.get(i);
        u32 i_start = b.instr.start;
        u32 i_count = b.instr.count;
        //stdio.printf("   B[%d] %d - %d\n", i, i_start, i_start+i_count-1);
        for (u32 j=i_start; j<i_start+i_count; j++) {
            Instr* is = &instrs[j];

            if (is.isPhi()) {
                PhiClause* clauses = fi.phis.get(is.phi_clauses.start);
                for (u32 p=0; p<is.phi_clauses.count; p++) {
                    Ref* r = &clauses[p].ref;
                    if (r.isTemp()) r.value = t.conversion.get(r.value);
                }
            } else {
                Ref* r = &is.args[0];
                if (r.isTemp()) r.value = t.conversion.get(r.value);
                r = &is.args[1];
                if (r.isTemp()) r.value = t.conversion.get(r.value);
                else if (r.isRefList()) { // can only occur on args[1]
                    Ref* refs = fi.refs.get(r.value);
                    u32 idx = 0;
                    while (1) {
                        Ref* r2 = &refs[idx];
                        if (r2.isTemp()) r2.value = t.conversion.get(r2.value);
                        if (!r2.isValid()) break;
                        idx++;
                    }
                }
            }
        }
    }
}

