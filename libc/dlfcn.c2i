module dlfcn;

import c2 local;

/* The MODE argument to `dlopen' contains one of the following: */
const u32 RTLD_LAZY         = 0x00001; /* Lazy function call binding.  */
const u32 RTLD_NOW          = 0x00002; /* Immediate function call binding.  */
const u32 RTLD_BINDING_MASK = 0x00003; /* Mask of binding time value.  */
const u32 RTLD_NOLOAD       = 0x00004; /* Do not load the object.  */
const u32 RTLD_DEEPBIND     = 0x00008; /* Use deep binding.  */

/* If the following bit is set in the MODE argument to `dlopen',
   the symbols of the loaded object and its dependencies are made
   visible as if the object were linked directly into the program.  */
const u32 RTLD_GLOBAL       = 0x00100;

/* Unix98 demands the following flag which is the inverse to RTLD_GLOBAL.
   The implementation does this by default and so we can define the
   value to zero.  */
const u32 RTLD_LOCAL = 0;

/* Do not delete object when closed.  */
const u32 RTLD_NODELETE   = 0x01000;

func void* dlopen(const c_char* file, c_int mode);

func c_int dlclose(void* handle);

func void* dlsym(void* handle, const c_char* name);

