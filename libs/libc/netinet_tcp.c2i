module netinet_tcp;

import c2 local;

const c_int SOL_TCP = 6;

const c_int SO_DEBUG     = 1;
// NOTE: , kept the TCP_ prefix for now (could be removed)

// User-settable options (used with setsockopt).
const c_int TCP_NODELAY              =  1;  /* Don't delay send to coalesce packets  */
const c_int TCP_MAXSEG               =  2;  /* Set maximum segment size  */
const c_int TCP_CORK                 =  3;  /* Control sending of partial frames  */
const c_int TCP_KEEPIDLE             =  4;  /* Start keeplives after this period */
const c_int TCP_KEEPINTVL            =  5;  /* Interval between keepalives */
const c_int TCP_KEEPCNT              =  6;  /* Number of keepalives before death */
const c_int TCP_SYNCNT               =  7;  /* Number of SYN retransmits */
const c_int TCP_LINGER2              =  8;  /* Life time of orphaned FIN-WAIT-2 state */
const c_int TCP_DEFER_ACCEPT         =  9;  /* Wake up listener only when data arrive */
const c_int TCP_WINDOW_CLAMP         = 10; /* Bound advertised window */
const c_int TCP_INFO                 = 11; /* Information about this connection. */
const c_int TCP_QUICKACK             = 12; /* Bock/reenable quick ACKs.  */
const c_int TCP_CONGESTION           = 13; /* Congestion control algorithm.  */
const c_int TCP_MD5SIG               = 14; /* TCP MD5 Signature (RFC2385) */
const c_int TCP_COOKIE_TRANSACTIONS  = 15; /* TCP Cookie Transactions */
const c_int TCP_THIN_LINEAR_TIMEOUTS = 16; /* Use linear timeouts for thin streams*/
const c_int TCP_THIN_DUPACK          = 17; /* Fast retrans. after 1 dupack */
const c_int TCP_USER_TIMEOUT         = 18; /* How long for loss retry before timeout */
const c_int TCP_REPAIR               = 19; /* TCP sock is under repair right now */
const c_int TCP_REPAIR_QUEUE         = 20; /* Set TCP queue to repair */
const c_int TCP_QUEUE_SEQ            = 21; /* Set sequence number of repaired queue. */
const c_int TCP_REPAIR_OPTIONS       = 22; /* Repair TCP connection options */
const c_int TCP_FASTOPEN             = 23; /* Enable FastOpen on listeners */
const c_int TCP_TIMESTAMP            = 24; /* TCP time stamp */
const c_int TCP_NOTSENT_LOWAT        = 25; /* Limit number of unsent bytes in write queue.  */
const c_int TCP_CC_INFO              = 26; /* Get Congestion Control (optional) info.  */
const c_int TCP_SAVE_SYN             = 27; /* Record SYN headers for new connections.  */
const c_int TCP_SAVED_SYN            = 28; /* Get SYN headers recorded for connection.  */
const c_int TCP_REPAIR_WINDOW        = 29; /* Get/set window parameters.  */
const c_int TCP_FASTOPEN_CONNECT     = 30; /* Attempt FastOpen with connect.  */
const c_int TCP_ULP                  = 31; /* Attach a ULP to a TCP connection.  */
const c_int TCP_MD5SIG_EXT           = 32; /* TCP MD5 Signature with extensions.  */
const c_int TCP_FASTOPEN_KEY         = 33; /* Set the key for Fast Open (cookie).  */
const c_int TCP_FASTOPEN_NO_COOKIE   = 34; /* Enable TFO without a TFO cookie.  */
const c_int TCP_ZEROCOPY_RECEIVE     = 35;
const c_int TCP_INQ                  = 36; /* Notify bytes available to read as a cmsg on read.  */
//const c_int TCP_CM_INQ       TCP_INQ
const c_int TCP_TX_DELAY             = 37; /* Delay outgoing packets by XX usec.  */

