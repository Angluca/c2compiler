module stdlib;

import c2 local;
#if __ASAN__ || __MSAN__ || __UBSAN__
import string;
#endif

type Div_t struct @(cname="div_t") {
    c_int quot;
    c_int rem;
}

type Ldiv_t struct @(cname="Ldiv_t") {
    c_long quot;
    c_long rem;
}

const c_int RAND_MAX = 2147483647;      // same as Int32_max

const i8 EXIT_FAILURE = 1;
const i8 EXIT_SUCCESS = 0;

fn void* calloc(c_size count, c_size size);
#if __ASAN__ || __MSAN__ || __UBSAN__
fn void* malloc(c_size size) {
    // fill malloced blocks with junk if debugging
    void *p = calloc(size, 1);
    return p ? string.memset(p, 0xAA, size) : p;
}
#else
fn void* malloc(c_size size);
#endif
fn void* realloc(void* ptr, c_size size);
//fn void* reallocf(void* ptr, c_size size);
fn void* valloc(c_size size);
fn void free(void* ptr);

fn c_double atof(const c_char* nptr);
fn c_int atoi(const c_char* nptr);
fn c_long atol(const c_char* nptr);
fn c_longlong atoll(const c_char* nptr);

fn c_double strtod(const c_char* nptr, c_char** endptr);
fn c_float strtof(const c_char* nptr, c_char** endptr);
// NOTE returns long double (16 bytes, bah!)
//fn c_longdouble strtold(const c_char* nptr, c_char** endptr);
fn c_long strtol(const c_char* nptr, c_char** endptr, c_int base);
fn c_ulong strtoul(const c_char* nptr, c_char** endptr, c_int base);
fn c_longlong strtoq(const c_char* nptr, c_char** endptr, c_int base);
fn c_ulonglong strtouq(const c_char* nptr, c_char** endptr, c_int base);
fn c_longlong strtoll(const c_char* nptr, c_char** endptr, c_int base);
fn c_ulonglong strtoull(const c_char* nptr, c_char** endptr, c_int base);

fn c_char* l64a(c_long n);
fn c_long a64l(const c_char* s);

fn c_long random();
fn void srandom(c_uint __seed);
fn c_char* initstate(c_uint __seed, c_char* __statebuf, c_size __statelen);
fn c_char* setstate(c_char* __statebuf);

type Random_data struct @(opaque, cname="random_data") {}

fn c_int random_r(Random_data* __buf, c_int* __result);
fn c_int srandom_r(c_uint __seed, Random_data* __buf);
fn c_int initstate_r(c_uint __seed, c_char* __statebuf, c_size __statelen, Random_data* __buf);
fn c_int setstate_r(c_char* __statebuf, Random_data* __buf);
fn c_int rand();
fn void srand(c_uint __seed);
fn c_int rand_r(c_uint* __seed);
fn c_double drand48();
fn c_double erand48(u16* __xsubi);
fn c_long lrand48();
fn c_long nrand48(u16* __xsubi);
fn c_long mrand48();
fn c_long jrand48(u16* __xsubi);
fn void srand48(c_long __seedval);
fn u16* seed48(u16* __seed16v);
fn void lcong48(u16* __param);

type Drand48_data struct @(opaque, cname="drand48_data") {}

fn c_int drand48_r(Drand48_data* __buffer, c_double* __result);
fn c_int erand48_r(u16* __xsubi, Drand48_data* __buffer, c_double* __result);
fn c_int lrand48_r(Drand48_data* __buffer, c_long* __result);
fn c_int nrand48_r(u16* __xsubi, Drand48_data* __buffer, c_long* __result);
fn c_int mrand48_r(Drand48_data* __buffer, c_long* __result);
fn c_int jrand48_r(u16* __xsubi, Drand48_data* __buffer, c_long* __result);
fn c_int srand48_r(c_long __seedval, Drand48_data* __buffer);
fn c_int seed48_r(u16* __seed16v, Drand48_data* __buffer);
fn c_int lcong48_r(u16* __param, Drand48_data* __buffer);

fn c_int posix_memalign(void** __memptr, c_size __alignment, c_size __size);
fn void* aligned_alloc(c_int __alignment, c_size __size);

fn void abort();
type AtExitFn fn void();
fn c_int atexit(AtExitFn __func);
fn c_int at_quick_exit(AtExitFn __func);
type OnExitFn fn void(c_int, void*);
fn c_int on_exit(OnExitFn __func, void* __arg);
fn void exit(c_int __status) @(noreturn);
fn void _exit(c_int __status) @(noreturn);
fn void quick_exit(c_int __status);
fn void _Exit(c_int __status);

fn c_char* getenv(const c_char* __name);
fn c_int putenv(c_char* __string);
fn c_int setenv(const c_char* __name, const c_char* __value, c_int __replace);
fn c_int unsetenv(const c_char* __name);
fn c_int clearenv();

fn c_int mkstemp(c_char* __template);
fn c_int mkstemps(c_char* __template, c_int __suffixlen);
fn c_char* mkdtemp(c_char* __template);
fn c_int system(const c_char* __command);
fn c_char* realpath(const c_char* __name, c_char* __resolved);
fn c_char* mktemp(c_char* __template);

type StdlibCompareFn fn c_int(const void*, const void*) @(cname="__compar_fn_t");
fn void* bsearch(const void* __key, const void* __base, c_size __nmemb, c_size __size, StdlibCompareFn __compar);
fn void qsort(void* __base, c_size __nmemb, c_size __size, StdlibCompareFn __compar);

fn c_int abs(c_int __x);
fn c_long labs(c_long __x);
fn Div_t div(c_int __numer, c_int __denom);
fn Ldiv_t ldiv(c_long __numer, c_long __denom);

fn c_char* ecvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
fn c_char* fcvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
fn c_char* gcvt(c_double __value, c_int __ndigit, c_char* __buf);
fn c_char* qecvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
fn c_char* qfcvt(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign);
fn c_char* qgcvt(c_double __value, c_int __ndigit, c_char* __buf);
fn c_int ecvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);
fn c_int fcvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);
fn c_int qecvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);
fn c_int qfcvt_r(c_double __value, c_int __ndigit, c_int* __decpt, c_int* __sign, c_char* __buf, c_size __len);

fn c_int mblen(const c_char* __s, c_size __n);
fn c_int mbtowc(c_int* __pwc, const c_char* __s, c_size __n);
// needs wchar_t
//fn c_int wctomb(c_char* __s, c_int __wc_char);
fn c_int mbstowcs(c_int* __pwcs, const c_char* __s, c_size __n);
fn c_int wcstombs(c_char* __s, const c_int* __pwcs, c_size __n);
fn c_int rpmatch(const c_char* __response);
// TODO need to parse c_char* const*
//fn c_int getsubopt(c_char** __optionp, c_char*const* __tokens, c_char** __valuep);
fn c_int getsubopt(c_char** __optionp, c_char** __tokens, c_char** __valuep);
fn c_int getloadavg(c_double* __loadavg, c_int __nelem);

